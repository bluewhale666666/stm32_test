; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\main.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\main.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\etherCAT -I.\Power -I.\CRC -IC:\Users\LENOVO\Desktop\slavecontroller\RTE -IC:\Users\LENOVO\Desktop\slavecontroller\RTE\Device\STM32F407ZETx -IC:\Users\LENOVO\Desktop\slavecontroller\RTE\Device\STM32F407ZETx\STCubeGenerated\Inc -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.16.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.16.0\Drivers\STM32F4xx_HAL_Driver\Inc -ISTCubeGenerated\Inc -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F407xx --omf_browse=.\objects\main.crf RTE\Device\STM32F407ZETx\STCubeGenerated\Src\main.c]
                          THUMB

                          AREA ||i.Error_Handler||, CODE, READONLY, ALIGN=1

                  Error_Handler PROC
;;;682      */
;;;683    void Error_Handler(void)
000000  b672              CPSID    i
;;;684    {
;;;685      /* USER CODE BEGIN Error_Handler_Debug */
;;;686      /* User can add his own implementation to report the HAL error return state */
;;;687      __disable_irq();
;;;688      while (1)
000002  bf00              NOP      
                  |L1.4|
000004  e7fe              B        |L1.4|
;;;689      {
;;;690      }
;;;691      /* USER CODE END Error_Handler_Debug */
;;;692    }
;;;693    
                          ENDP


                          AREA ||i.MX_CAN1_Init||, CODE, READONLY, ALIGN=2

                  MX_CAN1_Init PROC
;;;208      */
;;;209    static void MX_CAN1_Init(void)
000000  b510              PUSH     {r4,lr}
;;;210    {
;;;211    
;;;212      /* USER CODE BEGIN CAN1_Init 0 */
;;;213    
;;;214      /* USER CODE END CAN1_Init 0 */
;;;215    
;;;216      /* USER CODE BEGIN CAN1_Init 1 */
;;;217    
;;;218      /* USER CODE END CAN1_Init 1 */
;;;219      hcan1.Instance = CAN1;
000002  480b              LDR      r0,|L2.48|
000004  490b              LDR      r1,|L2.52|
000006  6008              STR      r0,[r1,#0]  ; hcan1
;;;220      hcan1.Init.Prescaler = 16;
000008  2010              MOVS     r0,#0x10
00000a  6048              STR      r0,[r1,#4]  ; hcan1
;;;221      hcan1.Init.Mode = CAN_MODE_NORMAL;
00000c  2100              MOVS     r1,#0
00000e  4809              LDR      r0,|L2.52|
000010  6081              STR      r1,[r0,#8]
;;;222      hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
000012  60c1              STR      r1,[r0,#0xc]
;;;223      hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
000014  6101              STR      r1,[r0,#0x10]
;;;224      hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
000016  6141              STR      r1,[r0,#0x14]
;;;225      hcan1.Init.TimeTriggeredMode = DISABLE;
000018  7601              STRB     r1,[r0,#0x18]
;;;226      hcan1.Init.AutoBusOff = DISABLE;
00001a  7641              STRB     r1,[r0,#0x19]
;;;227      hcan1.Init.AutoWakeUp = DISABLE;
00001c  7681              STRB     r1,[r0,#0x1a]
;;;228      hcan1.Init.AutoRetransmission = DISABLE;
00001e  76c1              STRB     r1,[r0,#0x1b]
;;;229      hcan1.Init.ReceiveFifoLocked = DISABLE;
000020  7701              STRB     r1,[r0,#0x1c]
;;;230      hcan1.Init.TransmitFifoPriority = DISABLE;
000022  7741              STRB     r1,[r0,#0x1d]
;;;231      if (HAL_CAN_Init(&hcan1) != HAL_OK)
000024  f7fffffe          BL       HAL_CAN_Init
000028  b108              CBZ      r0,|L2.46|
;;;232      {
;;;233        Error_Handler();
00002a  f7fffffe          BL       Error_Handler
                  |L2.46|
;;;234      }
;;;235      /* USER CODE BEGIN CAN1_Init 2 */
;;;236    
;;;237      /* USER CODE END CAN1_Init 2 */
;;;238    
;;;239    }
00002e  bd10              POP      {r4,pc}
;;;240    
                          ENDP

                  |L2.48|
                          DCD      0x40006400
                  |L2.52|
                          DCD      hcan1

                          AREA ||i.MX_DMA_Init||, CODE, READONLY, ALIGN=2

                  MX_DMA_Init PROC
;;;457      */
;;;458    static void MX_DMA_Init(void)
000000  b508              PUSH     {r3,lr}
;;;459    {
;;;460    
;;;461      /* DMA controller clock enable */
;;;462      __HAL_RCC_DMA2_CLK_ENABLE();
000002  bf00              NOP      
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
000008  4806              LDR      r0,|L3.36|
00000a  6800              LDR      r0,[r0,#0]
00000c  f4400080          ORR      r0,r0,#0x400000
000010  4904              LDR      r1,|L3.36|
000012  6008              STR      r0,[r1,#0]
000014  4608              MOV      r0,r1
000016  6800              LDR      r0,[r0,#0]
000018  f4000080          AND      r0,r0,#0x400000
00001c  9000              STR      r0,[sp,#0]
00001e  bf00              NOP      
000020  bf00              NOP      
;;;463    
;;;464    }
000022  bd08              POP      {r3,pc}
;;;465    
                          ENDP

                  |L3.36|
                          DCD      0x40023830

                          AREA ||i.MX_GPIO_Init||, CODE, READONLY, ALIGN=2

                  MX_GPIO_Init PROC
;;;470      */
;;;471    static void MX_GPIO_Init(void)
000000  b500              PUSH     {lr}
;;;472    {
000002  b087              SUB      sp,sp,#0x1c
;;;473      GPIO_InitTypeDef GPIO_InitStruct = {0};
000004  2114              MOVS     r1,#0x14
000006  a802              ADD      r0,sp,#8
000008  f7fffffe          BL       __aeabi_memclr4
;;;474    
;;;475      /* GPIO Ports Clock Enable */
;;;476      __HAL_RCC_GPIOE_CLK_ENABLE();
00000c  bf00              NOP      
00000e  2000              MOVS     r0,#0
000010  9001              STR      r0,[sp,#4]
000012  48c9              LDR      r0,|L4.824|
000014  6800              LDR      r0,[r0,#0]
000016  f0400010          ORR      r0,r0,#0x10
00001a  49c7              LDR      r1,|L4.824|
00001c  6008              STR      r0,[r1,#0]
00001e  4608              MOV      r0,r1
000020  6800              LDR      r0,[r0,#0]
000022  f0000010          AND      r0,r0,#0x10
000026  9001              STR      r0,[sp,#4]
000028  bf00              NOP      
00002a  bf00              NOP      
;;;477      __HAL_RCC_GPIOF_CLK_ENABLE();
00002c  bf00              NOP      
00002e  2000              MOVS     r0,#0
000030  9001              STR      r0,[sp,#4]
000032  4608              MOV      r0,r1
000034  6800              LDR      r0,[r0,#0]
000036  f0400020          ORR      r0,r0,#0x20
00003a  6008              STR      r0,[r1,#0]
00003c  4608              MOV      r0,r1
00003e  6800              LDR      r0,[r0,#0]
000040  f0000020          AND      r0,r0,#0x20
000044  9001              STR      r0,[sp,#4]
000046  bf00              NOP      
000048  bf00              NOP      
;;;478      __HAL_RCC_GPIOH_CLK_ENABLE();
00004a  bf00              NOP      
00004c  2000              MOVS     r0,#0
00004e  9001              STR      r0,[sp,#4]
000050  4608              MOV      r0,r1
000052  6800              LDR      r0,[r0,#0]
000054  f0400080          ORR      r0,r0,#0x80
000058  6008              STR      r0,[r1,#0]
00005a  4608              MOV      r0,r1
00005c  6800              LDR      r0,[r0,#0]
00005e  f0000080          AND      r0,r0,#0x80
000062  9001              STR      r0,[sp,#4]
000064  bf00              NOP      
000066  bf00              NOP      
;;;479      __HAL_RCC_GPIOA_CLK_ENABLE();
000068  bf00              NOP      
00006a  2000              MOVS     r0,#0
00006c  9001              STR      r0,[sp,#4]
00006e  4608              MOV      r0,r1
000070  6800              LDR      r0,[r0,#0]
000072  f0400001          ORR      r0,r0,#1
000076  6008              STR      r0,[r1,#0]
000078  4608              MOV      r0,r1
00007a  6800              LDR      r0,[r0,#0]
00007c  f0000001          AND      r0,r0,#1
000080  9001              STR      r0,[sp,#4]
000082  bf00              NOP      
000084  bf00              NOP      
;;;480      __HAL_RCC_GPIOC_CLK_ENABLE();
000086  bf00              NOP      
000088  2000              MOVS     r0,#0
00008a  9001              STR      r0,[sp,#4]
00008c  4608              MOV      r0,r1
00008e  6800              LDR      r0,[r0,#0]
000090  f0400004          ORR      r0,r0,#4
000094  6008              STR      r0,[r1,#0]
000096  4608              MOV      r0,r1
000098  6800              LDR      r0,[r0,#0]
00009a  f0000004          AND      r0,r0,#4
00009e  9001              STR      r0,[sp,#4]
0000a0  bf00              NOP      
0000a2  bf00              NOP      
;;;481      __HAL_RCC_GPIOB_CLK_ENABLE();
0000a4  bf00              NOP      
0000a6  2000              MOVS     r0,#0
0000a8  9001              STR      r0,[sp,#4]
0000aa  4608              MOV      r0,r1
0000ac  6800              LDR      r0,[r0,#0]
0000ae  f0400002          ORR      r0,r0,#2
0000b2  6008              STR      r0,[r1,#0]
0000b4  4608              MOV      r0,r1
0000b6  6800              LDR      r0,[r0,#0]
0000b8  f0000002          AND      r0,r0,#2
0000bc  9001              STR      r0,[sp,#4]
0000be  bf00              NOP      
0000c0  bf00              NOP      
;;;482      __HAL_RCC_GPIOG_CLK_ENABLE();
0000c2  bf00              NOP      
0000c4  2000              MOVS     r0,#0
0000c6  9001              STR      r0,[sp,#4]
0000c8  4608              MOV      r0,r1
0000ca  6800              LDR      r0,[r0,#0]
0000cc  f0400040          ORR      r0,r0,#0x40
0000d0  6008              STR      r0,[r1,#0]
0000d2  4608              MOV      r0,r1
0000d4  6800              LDR      r0,[r0,#0]
0000d6  f0000040          AND      r0,r0,#0x40
0000da  9001              STR      r0,[sp,#4]
0000dc  bf00              NOP      
0000de  bf00              NOP      
;;;483      __HAL_RCC_GPIOD_CLK_ENABLE();
0000e0  bf00              NOP      
0000e2  2000              MOVS     r0,#0
0000e4  9001              STR      r0,[sp,#4]
0000e6  4608              MOV      r0,r1
0000e8  6800              LDR      r0,[r0,#0]
0000ea  f0400008          ORR      r0,r0,#8
0000ee  6008              STR      r0,[r1,#0]
0000f0  4608              MOV      r0,r1
0000f2  6800              LDR      r0,[r0,#0]
0000f4  f0000008          AND      r0,r0,#8
0000f8  9001              STR      r0,[sp,#4]
0000fa  bf00              NOP      
0000fc  bf00              NOP      
;;;484    
;;;485      /*Configure GPIO pin Output Level */
;;;486      HAL_GPIO_WritePin(GPIOE, AI_IU_SW1_Pin|OC_PROTECT_Pin, GPIO_PIN_RESET);
0000fe  2200              MOVS     r2,#0
000100  2142              MOVS     r1,#0x42
000102  488e              LDR      r0,|L4.828|
000104  f7fffffe          BL       HAL_GPIO_WritePin
;;;487    
;;;488      /*Configure GPIO pin Output Level */
;;;489      HAL_GPIO_WritePin(GPIOF, V24V_OUT4_Pin|POWER24V_ON_Pin|ES_SHUTDOWN_Pin, GPIO_PIN_RESET);
000108  2200              MOVS     r2,#0
00010a  f2430104          MOV      r1,#0x3004
00010e  488c              LDR      r0,|L4.832|
000110  f7fffffe          BL       HAL_GPIO_WritePin
;;;490    
;;;491      /*Configure GPIO pin Output Level */
;;;492      HAL_GPIO_WritePin(GPIOF, LED6_Pin|PHY_RESET_Pin|ET_RESETN_Pin|LED3_Pin
000114  2201              MOVS     r2,#1
000116  f44f61e7          MOV      r1,#0x738
00011a  4889              LDR      r0,|L4.832|
00011c  f7fffffe          BL       HAL_GPIO_WritePin
;;;493                              |LED4_Pin|LED5_Pin, GPIO_PIN_SET);
;;;494    
;;;495      /*Configure GPIO pin Output Level */
;;;496      HAL_GPIO_WritePin(RS485_RE_GPIO_Port, RS485_RE_Pin, GPIO_PIN_SET);
000120  2201              MOVS     r2,#1
000122  2110              MOVS     r1,#0x10
000124  4887              LDR      r0,|L4.836|
000126  f7fffffe          BL       HAL_GPIO_WritePin
;;;497    
;;;498      /*Configure GPIO pin Output Level */
;;;499      HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin|ST_OUT_1_Pin, GPIO_PIN_SET);
00012a  2201              MOVS     r2,#1
00012c  f44f7198          MOV      r1,#0x130
000130  4885              LDR      r0,|L4.840|
000132  f7fffffe          BL       HAL_GPIO_WritePin
;;;500    
;;;501      /*Configure GPIO pin Output Level */
;;;502      HAL_GPIO_WritePin(GPIOB, AI_IU_SW2_Pin|V24V_OUT1_Pin, GPIO_PIN_RESET);
000136  2200              MOVS     r2,#0
000138  f2402102          MOV      r1,#0x202
00013c  4883              LDR      r0,|L4.844|
00013e  f7fffffe          BL       HAL_GPIO_WritePin
;;;503    
;;;504      /*Configure GPIO pin Output Level */
;;;505      HAL_GPIO_WritePin(GPIOE, ST_OUT_24_Pin|ST_OUT_23_Pin|ST_OUT_22_Pin|ST_OUT_20_Pin
000142  2201              MOVS     r2,#1
000144  f44f41f8          MOV      r1,#0x7c00
000148  487c              LDR      r0,|L4.828|
00014a  f7fffffe          BL       HAL_GPIO_WritePin
;;;506                              |ST_OUT_21_Pin, GPIO_PIN_SET);
;;;507    
;;;508      /*Configure GPIO pin Output Level */
;;;509      HAL_GPIO_WritePin(GPIOB, ST_OUT_19_Pin|ST_OUT_18_Pin|ST_OUT_17_Pin|ST_OUT_8_Pin, GPIO_PIN_SET);
00014e  2201              MOVS     r2,#1
000150  f44f4170          MOV      r1,#0xf000
000154  487d              LDR      r0,|L4.844|
000156  f7fffffe          BL       HAL_GPIO_WritePin
;;;510    
;;;511      /*Configure GPIO pin Output Level */
;;;512      HAL_GPIO_WritePin(GPIOD, ST_OUT_7_Pin|ST_OUT_6_Pin|ST_OUT_5_Pin, GPIO_PIN_SET);
00015a  2201              MOVS     r2,#1
00015c  f44f61e0          MOV      r1,#0x700
000160  487b              LDR      r0,|L4.848|
000162  f7fffffe          BL       HAL_GPIO_WritePin
;;;513    
;;;514      /*Configure GPIO pin Output Level */
;;;515      HAL_GPIO_WritePin(GPIOG, LAN9252_CS_Pin|ST_OUT_4_Pin|ST_OUT_3_Pin|ST_OUT_2_Pin, GPIO_PIN_SET);
000166  2201              MOVS     r2,#1
000168  f44f71e8          MOV      r1,#0x1d0
00016c  4879              LDR      r0,|L4.852|
00016e  f7fffffe          BL       HAL_GPIO_WritePin
;;;516    
;;;517      /*Configure GPIO pins : SYNC0_Pin SYNC1_Pin */
;;;518      GPIO_InitStruct.Pin = SYNC0_Pin|SYNC1_Pin;
000172  200c              MOVS     r0,#0xc
000174  9002              STR      r0,[sp,#8]
;;;519      GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
000176  f44f1004          MOV      r0,#0x210000
00017a  9003              STR      r0,[sp,#0xc]
;;;520      GPIO_InitStruct.Pull = GPIO_NOPULL;
00017c  2000              MOVS     r0,#0
00017e  9004              STR      r0,[sp,#0x10]
;;;521      HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
000180  a902              ADD      r1,sp,#8
000182  486e              LDR      r0,|L4.828|
000184  f7fffffe          BL       HAL_GPIO_Init
;;;522    
;;;523      /*Configure GPIO pins : AI_IU_SW1_Pin OC_PROTECT_Pin */
;;;524      GPIO_InitStruct.Pin = AI_IU_SW1_Pin|OC_PROTECT_Pin;
000188  2042              MOVS     r0,#0x42
00018a  9002              STR      r0,[sp,#8]
;;;525      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
00018c  2001              MOVS     r0,#1
00018e  9003              STR      r0,[sp,#0xc]
;;;526      GPIO_InitStruct.Pull = GPIO_NOPULL;
000190  2000              MOVS     r0,#0
000192  9004              STR      r0,[sp,#0x10]
;;;527      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
000194  9005              STR      r0,[sp,#0x14]
;;;528      HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
000196  a902              ADD      r1,sp,#8
000198  4868              LDR      r0,|L4.828|
00019a  f7fffffe          BL       HAL_GPIO_Init
;;;529    
;;;530      /*Configure GPIO pins : V24V_OUT4_Pin POWER24V_ON_Pin ES_SHUTDOWN_Pin */
;;;531      GPIO_InitStruct.Pin = V24V_OUT4_Pin|POWER24V_ON_Pin|ES_SHUTDOWN_Pin;
00019e  f2430004          MOV      r0,#0x3004
0001a2  9002              STR      r0,[sp,#8]
;;;532      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
0001a4  2001              MOVS     r0,#1
0001a6  9003              STR      r0,[sp,#0xc]
;;;533      GPIO_InitStruct.Pull = GPIO_NOPULL;
0001a8  2000              MOVS     r0,#0
0001aa  9004              STR      r0,[sp,#0x10]
;;;534      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
0001ac  9005              STR      r0,[sp,#0x14]
;;;535      HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
0001ae  a902              ADD      r1,sp,#8
0001b0  4863              LDR      r0,|L4.832|
0001b2  f7fffffe          BL       HAL_GPIO_Init
;;;536    
;;;537      /*Configure GPIO pins : LED6_Pin PHY_RESET_Pin ET_RESETN_Pin LED3_Pin
;;;538                               LED4_Pin LED5_Pin */
;;;539      GPIO_InitStruct.Pin = LED6_Pin|PHY_RESET_Pin|ET_RESETN_Pin|LED3_Pin
0001b6  f44f60e7          MOV      r0,#0x738
0001ba  9002              STR      r0,[sp,#8]
;;;540                              |LED4_Pin|LED5_Pin;
;;;541      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
0001bc  2011              MOVS     r0,#0x11
0001be  9003              STR      r0,[sp,#0xc]
;;;542      GPIO_InitStruct.Pull = GPIO_NOPULL;
0001c0  2000              MOVS     r0,#0
0001c2  9004              STR      r0,[sp,#0x10]
;;;543      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
0001c4  9005              STR      r0,[sp,#0x14]
;;;544      HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
0001c6  a902              ADD      r1,sp,#8
0001c8  485d              LDR      r0,|L4.832|
0001ca  f7fffffe          BL       HAL_GPIO_Init
;;;545    
;;;546      /*Configure GPIO pin : IRQ_Pin */
;;;547      GPIO_InitStruct.Pin = IRQ_Pin;
0001ce  2002              MOVS     r0,#2
0001d0  9002              STR      r0,[sp,#8]
;;;548      GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
0001d2  f44f1004          MOV      r0,#0x210000
0001d6  9003              STR      r0,[sp,#0xc]
;;;549      GPIO_InitStruct.Pull = GPIO_NOPULL;
0001d8  2000              MOVS     r0,#0
0001da  9004              STR      r0,[sp,#0x10]
;;;550      HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
0001dc  a902              ADD      r1,sp,#8
0001de  4859              LDR      r0,|L4.836|
0001e0  f7fffffe          BL       HAL_GPIO_Init
;;;551    
;;;552      /*Configure GPIO pin : RS485_RE_Pin */
;;;553      GPIO_InitStruct.Pin = RS485_RE_Pin;
0001e4  2010              MOVS     r0,#0x10
0001e6  9002              STR      r0,[sp,#8]
;;;554      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
0001e8  2001              MOVS     r0,#1
0001ea  9003              STR      r0,[sp,#0xc]
;;;555      GPIO_InitStruct.Pull = GPIO_PULLUP;
0001ec  9004              STR      r0,[sp,#0x10]
;;;556      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
0001ee  2003              MOVS     r0,#3
0001f0  9005              STR      r0,[sp,#0x14]
;;;557      HAL_GPIO_Init(RS485_RE_GPIO_Port, &GPIO_InitStruct);
0001f2  a902              ADD      r1,sp,#8
0001f4  4853              LDR      r0,|L4.836|
0001f6  f7fffffe          BL       HAL_GPIO_Init
;;;558    
;;;559      /*Configure GPIO pins : LED2_Pin LED1_Pin ST_OUT_1_Pin */
;;;560      GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|ST_OUT_1_Pin;
0001fa  f44f7098          MOV      r0,#0x130
0001fe  9002              STR      r0,[sp,#8]
;;;561      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
000200  2011              MOVS     r0,#0x11
000202  9003              STR      r0,[sp,#0xc]
;;;562      GPIO_InitStruct.Pull = GPIO_NOPULL;
000204  2000              MOVS     r0,#0
000206  9004              STR      r0,[sp,#0x10]
;;;563      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
000208  9005              STR      r0,[sp,#0x14]
;;;564      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
00020a  a902              ADD      r1,sp,#8
00020c  484e              LDR      r0,|L4.840|
00020e  f7fffffe          BL       HAL_GPIO_Init
;;;565    
;;;566      /*Configure GPIO pins : AI_IU_SW2_Pin V24V_OUT1_Pin */
;;;567      GPIO_InitStruct.Pin = AI_IU_SW2_Pin|V24V_OUT1_Pin;
000212  f2402002          MOV      r0,#0x202
000216  9002              STR      r0,[sp,#8]
;;;568      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
000218  2001              MOVS     r0,#1
00021a  9003              STR      r0,[sp,#0xc]
;;;569      GPIO_InitStruct.Pull = GPIO_NOPULL;
00021c  2000              MOVS     r0,#0
00021e  9004              STR      r0,[sp,#0x10]
;;;570      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
000220  9005              STR      r0,[sp,#0x14]
;;;571      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
000222  a902              ADD      r1,sp,#8
000224  4849              LDR      r0,|L4.844|
000226  f7fffffe          BL       HAL_GPIO_Init
;;;572    
;;;573      /*Configure GPIO pin : SAFE_48V_SWITCH_Pin */
;;;574      GPIO_InitStruct.Pin = SAFE_48V_SWITCH_Pin;
00022a  f44f6000          MOV      r0,#0x800
00022e  9002              STR      r0,[sp,#8]
;;;575      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
000230  2000              MOVS     r0,#0
000232  9003              STR      r0,[sp,#0xc]
;;;576      GPIO_InitStruct.Pull = GPIO_NOPULL;
000234  9004              STR      r0,[sp,#0x10]
;;;577      HAL_GPIO_Init(SAFE_48V_SWITCH_GPIO_Port, &GPIO_InitStruct);
000236  a902              ADD      r1,sp,#8
000238  4841              LDR      r0,|L4.832|
00023a  f7fffffe          BL       HAL_GPIO_Init
;;;578    
;;;579      /*Configure GPIO pins : ACPower_OK_Pin ST_IN_19_Pin ST_IN_18_Pin ST_IN_1_Pin
;;;580                               ST_IN_6_Pin ST_IN_5_Pin ST_IN_1G11_Pin ST_IN_2_Pin
;;;581                               ST_IN_3_Pin ST_IN_4_Pin */
;;;582      GPIO_InitStruct.Pin = ACPower_OK_Pin|ST_IN_19_Pin|ST_IN_18_Pin|ST_IN_1_Pin
00023e  f647602e          MOV      r0,#0x7e2e
000242  9002              STR      r0,[sp,#8]
;;;583                              |ST_IN_6_Pin|ST_IN_5_Pin|ST_IN_1G11_Pin|ST_IN_2_Pin
;;;584                              |ST_IN_3_Pin|ST_IN_4_Pin;
;;;585      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
000244  2000              MOVS     r0,#0
000246  9003              STR      r0,[sp,#0xc]
;;;586      GPIO_InitStruct.Pull = GPIO_NOPULL;
000248  9004              STR      r0,[sp,#0x10]
;;;587      HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
00024a  a902              ADD      r1,sp,#8
00024c  4841              LDR      r0,|L4.852|
00024e  f7fffffe          BL       HAL_GPIO_Init
;;;588    
;;;589      /*Configure GPIO pins : ST_OUT_24_Pin ST_OUT_23_Pin ST_OUT_22_Pin ST_OUT_20_Pin
;;;590                               ST_OUT_21_Pin */
;;;591      GPIO_InitStruct.Pin = ST_OUT_24_Pin|ST_OUT_23_Pin|ST_OUT_22_Pin|ST_OUT_20_Pin
000252  f44f40f8          MOV      r0,#0x7c00
000256  9002              STR      r0,[sp,#8]
;;;592                              |ST_OUT_21_Pin;
;;;593      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
000258  2011              MOVS     r0,#0x11
00025a  9003              STR      r0,[sp,#0xc]
;;;594      GPIO_InitStruct.Pull = GPIO_NOPULL;
00025c  2000              MOVS     r0,#0
00025e  9004              STR      r0,[sp,#0x10]
;;;595      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
000260  9005              STR      r0,[sp,#0x14]
;;;596      HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
000262  a902              ADD      r1,sp,#8
000264  4835              LDR      r0,|L4.828|
000266  f7fffffe          BL       HAL_GPIO_Init
;;;597    
;;;598      /*Configure GPIO pins : POWEROFF_REMOTEIN_Pin POWERON_KEYIN_Pin */
;;;599      GPIO_InitStruct.Pin = POWEROFF_REMOTEIN_Pin|POWERON_KEYIN_Pin;
00026a  f2480001          MOV      r0,#0x8001
00026e  9002              STR      r0,[sp,#8]
;;;600      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
000270  2000              MOVS     r0,#0
000272  9003              STR      r0,[sp,#0xc]
;;;601      GPIO_InitStruct.Pull = GPIO_NOPULL;
000274  9004              STR      r0,[sp,#0x10]
;;;602      HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
000276  a902              ADD      r1,sp,#8
000278  4830              LDR      r0,|L4.828|
00027a  f7fffffe          BL       HAL_GPIO_Init
;;;603    
;;;604      /*Configure GPIO pins : ST_OUT_19_Pin ST_OUT_18_Pin ST_OUT_17_Pin ST_OUT_8_Pin */
;;;605      GPIO_InitStruct.Pin = ST_OUT_19_Pin|ST_OUT_18_Pin|ST_OUT_17_Pin|ST_OUT_8_Pin;
00027e  f44f4070          MOV      r0,#0xf000
000282  9002              STR      r0,[sp,#8]
;;;606      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
000284  2011              MOVS     r0,#0x11
000286  9003              STR      r0,[sp,#0xc]
;;;607      GPIO_InitStruct.Pull = GPIO_NOPULL;
000288  2000              MOVS     r0,#0
00028a  9004              STR      r0,[sp,#0x10]
;;;608      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
00028c  9005              STR      r0,[sp,#0x14]
;;;609      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
00028e  a902              ADD      r1,sp,#8
000290  482e              LDR      r0,|L4.844|
000292  f7fffffe          BL       HAL_GPIO_Init
;;;610    
;;;611      /*Configure GPIO pins : ST_OUT_7_Pin ST_OUT_6_Pin ST_OUT_5_Pin */
;;;612      GPIO_InitStruct.Pin = ST_OUT_7_Pin|ST_OUT_6_Pin|ST_OUT_5_Pin;
000296  f44f60e0          MOV      r0,#0x700
00029a  9002              STR      r0,[sp,#8]
;;;613      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
00029c  2011              MOVS     r0,#0x11
00029e  9003              STR      r0,[sp,#0xc]
;;;614      GPIO_InitStruct.Pull = GPIO_NOPULL;
0002a0  2000              MOVS     r0,#0
0002a2  9004              STR      r0,[sp,#0x10]
;;;615      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
0002a4  9005              STR      r0,[sp,#0x14]
;;;616      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
0002a6  a902              ADD      r1,sp,#8
0002a8  4829              LDR      r0,|L4.848|
0002aa  f7fffffe          BL       HAL_GPIO_Init
;;;617    
;;;618      /*Configure GPIO pins : ST_IN_23_Pin ST_IN_22_Pin ST_IN_21_Pin ST_IN_24_Pin
;;;619                               ST_IN_20_Pin ST_IN_8_Pin ST_IN_7_Pin */
;;;620      GPIO_InitStruct.Pin = ST_IN_23_Pin|ST_IN_22_Pin|ST_IN_21_Pin|ST_IN_24_Pin
0002ae  f64f00c0          MOV      r0,#0xf8c0
0002b2  9002              STR      r0,[sp,#8]
;;;621                              |ST_IN_20_Pin|ST_IN_8_Pin|ST_IN_7_Pin;
;;;622      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
0002b4  2000              MOVS     r0,#0
0002b6  9003              STR      r0,[sp,#0xc]
;;;623      GPIO_InitStruct.Pull = GPIO_NOPULL;
0002b8  9004              STR      r0,[sp,#0x10]
;;;624      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
0002ba  a902              ADD      r1,sp,#8
0002bc  4824              LDR      r0,|L4.848|
0002be  f7fffffe          BL       HAL_GPIO_Init
;;;625    
;;;626      /*Configure GPIO pin : LAN9252_CS_Pin */
;;;627      GPIO_InitStruct.Pin = LAN9252_CS_Pin;
0002c2  2010              MOVS     r0,#0x10
0002c4  9002              STR      r0,[sp,#8]
;;;628      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
0002c6  2001              MOVS     r0,#1
0002c8  9003              STR      r0,[sp,#0xc]
;;;629      GPIO_InitStruct.Pull = GPIO_PULLUP;
0002ca  9004              STR      r0,[sp,#0x10]
;;;630      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
0002cc  2003              MOVS     r0,#3
0002ce  9005              STR      r0,[sp,#0x14]
;;;631      HAL_GPIO_Init(LAN9252_CS_GPIO_Port, &GPIO_InitStruct);
0002d0  a902              ADD      r1,sp,#8
0002d2  4820              LDR      r0,|L4.852|
0002d4  f7fffffe          BL       HAL_GPIO_Init
;;;632    
;;;633      /*Configure GPIO pins : ST_OUT_4_Pin ST_OUT_3_Pin ST_OUT_2_Pin */
;;;634      GPIO_InitStruct.Pin = ST_OUT_4_Pin|ST_OUT_3_Pin|ST_OUT_2_Pin;
0002d8  f44f70e0          MOV      r0,#0x1c0
0002dc  9002              STR      r0,[sp,#8]
;;;635      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
0002de  2011              MOVS     r0,#0x11
0002e0  9003              STR      r0,[sp,#0xc]
;;;636      GPIO_InitStruct.Pull = GPIO_NOPULL;
0002e2  2000              MOVS     r0,#0
0002e4  9004              STR      r0,[sp,#0x10]
;;;637      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
0002e6  9005              STR      r0,[sp,#0x14]
;;;638      HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
0002e8  a902              ADD      r1,sp,#8
0002ea  481a              LDR      r0,|L4.852|
0002ec  f7fffffe          BL       HAL_GPIO_Init
;;;639    
;;;640      /*Configure GPIO pin : POWERON_REMOTEIN_Pin */
;;;641      GPIO_InitStruct.Pin = POWERON_REMOTEIN_Pin;
0002f0  f44f7080          MOV      r0,#0x100
0002f4  9002              STR      r0,[sp,#8]
;;;642      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
0002f6  2000              MOVS     r0,#0
0002f8  9003              STR      r0,[sp,#0xc]
;;;643      GPIO_InitStruct.Pull = GPIO_NOPULL;
0002fa  9004              STR      r0,[sp,#0x10]
;;;644      HAL_GPIO_Init(POWERON_REMOTEIN_GPIO_Port, &GPIO_InitStruct);
0002fc  a902              ADD      r1,sp,#8
0002fe  4813              LDR      r0,|L4.844|
000300  f7fffffe          BL       HAL_GPIO_Init
;;;645    
;;;646      /* EXTI interrupt init*/
;;;647      HAL_NVIC_SetPriority(EXTI1_IRQn, 6, 0);
000304  2200              MOVS     r2,#0
000306  2106              MOVS     r1,#6
000308  2007              MOVS     r0,#7
00030a  f7fffffe          BL       HAL_NVIC_SetPriority
;;;648      HAL_NVIC_EnableIRQ(EXTI1_IRQn);
00030e  2007              MOVS     r0,#7
000310  f7fffffe          BL       HAL_NVIC_EnableIRQ
;;;649    
;;;650      HAL_NVIC_SetPriority(EXTI2_IRQn, 6, 1);
000314  2201              MOVS     r2,#1
000316  2106              MOVS     r1,#6
000318  2008              MOVS     r0,#8
00031a  f7fffffe          BL       HAL_NVIC_SetPriority
;;;651      HAL_NVIC_EnableIRQ(EXTI2_IRQn);
00031e  2008              MOVS     r0,#8
000320  f7fffffe          BL       HAL_NVIC_EnableIRQ
;;;652    
;;;653      HAL_NVIC_SetPriority(EXTI3_IRQn, 7, 0);
000324  2200              MOVS     r2,#0
000326  2107              MOVS     r1,#7
000328  2009              MOVS     r0,#9
00032a  f7fffffe          BL       HAL_NVIC_SetPriority
;;;654      HAL_NVIC_EnableIRQ(EXTI3_IRQn);
00032e  2009              MOVS     r0,#9
000330  f7fffffe          BL       HAL_NVIC_EnableIRQ
;;;655    
;;;656    }
000334  b007              ADD      sp,sp,#0x1c
000336  bd00              POP      {pc}
;;;657    
                          ENDP

                  |L4.824|
                          DCD      0x40023830
                  |L4.828|
                          DCD      0x40021000
                  |L4.832|
                          DCD      0x40021400
                  |L4.836|
                          DCD      0x40020000
                  |L4.840|
                          DCD      0x40020800
                  |L4.844|
                          DCD      0x40020400
                  |L4.848|
                          DCD      0x40020c00
                  |L4.852|
                          DCD      0x40021800

                          AREA ||i.MX_I2C1_Init||, CODE, READONLY, ALIGN=2

                  MX_I2C1_Init PROC
;;;245      */
;;;246    static void MX_I2C1_Init(void)
000000  b510              PUSH     {r4,lr}
;;;247    {
;;;248    
;;;249      /* USER CODE BEGIN I2C1_Init 0 */
;;;250    
;;;251      /* USER CODE END I2C1_Init 0 */
;;;252    
;;;253      /* USER CODE BEGIN I2C1_Init 1 */
;;;254    
;;;255      /* USER CODE END I2C1_Init 1 */
;;;256      hi2c1.Instance = I2C1;
000002  480b              LDR      r0,|L5.48|
000004  490b              LDR      r1,|L5.52|
000006  6008              STR      r0,[r1,#0]  ; hi2c1
;;;257      hi2c1.Init.ClockSpeed = 100000;
000008  480b              LDR      r0,|L5.56|
00000a  6048              STR      r0,[r1,#4]  ; hi2c1
;;;258      hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
00000c  2100              MOVS     r1,#0
00000e  4809              LDR      r0,|L5.52|
000010  6081              STR      r1,[r0,#8]
;;;259      hi2c1.Init.OwnAddress1 = 0;
000012  60c1              STR      r1,[r0,#0xc]
;;;260      hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
000014  f44f4180          MOV      r1,#0x4000
000018  6101              STR      r1,[r0,#0x10]
;;;261      hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
00001a  2100              MOVS     r1,#0
00001c  6141              STR      r1,[r0,#0x14]
;;;262      hi2c1.Init.OwnAddress2 = 0;
00001e  6181              STR      r1,[r0,#0x18]
;;;263      hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
000020  61c1              STR      r1,[r0,#0x1c]
;;;264      hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
000022  6201              STR      r1,[r0,#0x20]
;;;265      if (HAL_I2C_Init(&hi2c1) != HAL_OK)
000024  f7fffffe          BL       HAL_I2C_Init
000028  b108              CBZ      r0,|L5.46|
;;;266      {
;;;267        Error_Handler();
00002a  f7fffffe          BL       Error_Handler
                  |L5.46|
;;;268      }
;;;269      /* USER CODE BEGIN I2C1_Init 2 */
;;;270    
;;;271      /* USER CODE END I2C1_Init 2 */
;;;272    
;;;273    }
00002e  bd10              POP      {r4,pc}
;;;274    
                          ENDP

                  |L5.48|
                          DCD      0x40005400
                  |L5.52|
                          DCD      hi2c1
                  |L5.56|
                          DCD      0x000186a0

                          AREA ||i.MX_I2C2_Init||, CODE, READONLY, ALIGN=2

                  MX_I2C2_Init PROC
;;;279      */
;;;280    static void MX_I2C2_Init(void)
000000  b510              PUSH     {r4,lr}
;;;281    {
;;;282    
;;;283      /* USER CODE BEGIN I2C2_Init 0 */
;;;284    
;;;285      /* USER CODE END I2C2_Init 0 */
;;;286    
;;;287      /* USER CODE BEGIN I2C2_Init 1 */
;;;288    
;;;289      /* USER CODE END I2C2_Init 1 */
;;;290      hi2c2.Instance = I2C2;
000002  480b              LDR      r0,|L6.48|
000004  490b              LDR      r1,|L6.52|
000006  6008              STR      r0,[r1,#0]  ; hi2c2
;;;291      hi2c2.Init.ClockSpeed = 100000;
000008  480b              LDR      r0,|L6.56|
00000a  6048              STR      r0,[r1,#4]  ; hi2c2
;;;292      hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
00000c  2100              MOVS     r1,#0
00000e  4809              LDR      r0,|L6.52|
000010  6081              STR      r1,[r0,#8]
;;;293      hi2c2.Init.OwnAddress1 = 0;
000012  60c1              STR      r1,[r0,#0xc]
;;;294      hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
000014  f44f4180          MOV      r1,#0x4000
000018  6101              STR      r1,[r0,#0x10]
;;;295      hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
00001a  2100              MOVS     r1,#0
00001c  6141              STR      r1,[r0,#0x14]
;;;296      hi2c2.Init.OwnAddress2 = 0;
00001e  6181              STR      r1,[r0,#0x18]
;;;297      hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
000020  61c1              STR      r1,[r0,#0x1c]
;;;298      hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
000022  6201              STR      r1,[r0,#0x20]
;;;299      if (HAL_I2C_Init(&hi2c2) != HAL_OK)
000024  f7fffffe          BL       HAL_I2C_Init
000028  b108              CBZ      r0,|L6.46|
;;;300      {
;;;301        Error_Handler();
00002a  f7fffffe          BL       Error_Handler
                  |L6.46|
;;;302      }
;;;303      /* USER CODE BEGIN I2C2_Init 2 */
;;;304    
;;;305      /* USER CODE END I2C2_Init 2 */
;;;306    
;;;307    }
00002e  bd10              POP      {r4,pc}
;;;308    
                          ENDP

                  |L6.48|
                          DCD      0x40005800
                  |L6.52|
                          DCD      hi2c2
                  |L6.56|
                          DCD      0x000186a0

                          AREA ||i.MX_I2C3_Init||, CODE, READONLY, ALIGN=2

                  MX_I2C3_Init PROC
;;;313      */
;;;314    static void MX_I2C3_Init(void)
000000  b510              PUSH     {r4,lr}
;;;315    {
;;;316    
;;;317      /* USER CODE BEGIN I2C3_Init 0 */
;;;318    
;;;319      /* USER CODE END I2C3_Init 0 */
;;;320    
;;;321      /* USER CODE BEGIN I2C3_Init 1 */
;;;322    
;;;323      /* USER CODE END I2C3_Init 1 */
;;;324      hi2c3.Instance = I2C3;
000002  480b              LDR      r0,|L7.48|
000004  490b              LDR      r1,|L7.52|
000006  6008              STR      r0,[r1,#0]  ; hi2c3
;;;325      hi2c3.Init.ClockSpeed = 100000;
000008  480b              LDR      r0,|L7.56|
00000a  6048              STR      r0,[r1,#4]  ; hi2c3
;;;326      hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
00000c  2100              MOVS     r1,#0
00000e  4809              LDR      r0,|L7.52|
000010  6081              STR      r1,[r0,#8]
;;;327      hi2c3.Init.OwnAddress1 = 0;
000012  60c1              STR      r1,[r0,#0xc]
;;;328      hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
000014  f44f4180          MOV      r1,#0x4000
000018  6101              STR      r1,[r0,#0x10]
;;;329      hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
00001a  2100              MOVS     r1,#0
00001c  6141              STR      r1,[r0,#0x14]
;;;330      hi2c3.Init.OwnAddress2 = 0;
00001e  6181              STR      r1,[r0,#0x18]
;;;331      hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
000020  61c1              STR      r1,[r0,#0x1c]
;;;332      hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
000022  6201              STR      r1,[r0,#0x20]
;;;333      if (HAL_I2C_Init(&hi2c3) != HAL_OK)
000024  f7fffffe          BL       HAL_I2C_Init
000028  b108              CBZ      r0,|L7.46|
;;;334      {
;;;335        Error_Handler();
00002a  f7fffffe          BL       Error_Handler
                  |L7.46|
;;;336      }
;;;337      /* USER CODE BEGIN I2C3_Init 2 */
;;;338    
;;;339      /* USER CODE END I2C3_Init 2 */
;;;340    
;;;341    }
00002e  bd10              POP      {r4,pc}
;;;342    
                          ENDP

                  |L7.48|
                          DCD      0x40005c00
                  |L7.52|
                          DCD      hi2c3
                  |L7.56|
                          DCD      0x000186a0

                          AREA ||i.MX_SPI3_Init||, CODE, READONLY, ALIGN=2

                  MX_SPI3_Init PROC
;;;347      */
;;;348    static void MX_SPI3_Init(void)
000000  b510              PUSH     {r4,lr}
;;;349    {
;;;350    
;;;351      /* USER CODE BEGIN SPI3_Init 0 */
;;;352    
;;;353      /* USER CODE END SPI3_Init 0 */
;;;354    
;;;355      /* USER CODE BEGIN SPI3_Init 1 */
;;;356    
;;;357      /* USER CODE END SPI3_Init 1 */
;;;358      /* SPI3 parameter configuration*/
;;;359      hspi3.Instance = SPI3;
000002  480e              LDR      r0,|L8.60|
000004  490e              LDR      r1,|L8.64|
000006  6008              STR      r0,[r1,#0]  ; hspi3
;;;360      hspi3.Init.Mode = SPI_MODE_MASTER;
000008  f44f7082          MOV      r0,#0x104
00000c  6048              STR      r0,[r1,#4]  ; hspi3
;;;361      hspi3.Init.Direction = SPI_DIRECTION_2LINES;
00000e  2100              MOVS     r1,#0
000010  480b              LDR      r0,|L8.64|
000012  6081              STR      r1,[r0,#8]
;;;362      hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
000014  60c1              STR      r1,[r0,#0xc]
;;;363      hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
000016  6101              STR      r1,[r0,#0x10]
;;;364      hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
000018  6141              STR      r1,[r0,#0x14]
;;;365      hspi3.Init.NSS = SPI_NSS_SOFT;
00001a  f44f7100          MOV      r1,#0x200
00001e  6181              STR      r1,[r0,#0x18]
;;;366      hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
000020  2110              MOVS     r1,#0x10
000022  61c1              STR      r1,[r0,#0x1c]
;;;367      hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
000024  2100              MOVS     r1,#0
000026  6201              STR      r1,[r0,#0x20]
;;;368      hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
000028  6241              STR      r1,[r0,#0x24]
;;;369      hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
00002a  6281              STR      r1,[r0,#0x28]
;;;370      hspi3.Init.CRCPolynomial = 10;
00002c  210a              MOVS     r1,#0xa
00002e  62c1              STR      r1,[r0,#0x2c]
;;;371      if (HAL_SPI_Init(&hspi3) != HAL_OK)
000030  f7fffffe          BL       HAL_SPI_Init
000034  b108              CBZ      r0,|L8.58|
;;;372      {
;;;373        Error_Handler();
000036  f7fffffe          BL       Error_Handler
                  |L8.58|
;;;374      }
;;;375      /* USER CODE BEGIN SPI3_Init 2 */
;;;376    //	hspi3.pTxBuffPtr = EcatSpiWriteBuffer;
;;;377    //	hspi3.pRxBuffPtr = EcatSpiReadBuffer;
;;;378    //	hspi3.RxXferSize = SPI_BUFFER_SIZE;
;;;379    //	hspi3.TxXferSize = SPI_BUFFER_SIZE;
;;;380    //	hspi3.RxXferCount = 0u;
;;;381    //	hspi3.TxXferCount = 0u;
;;;382      /* USER CODE END SPI3_Init 2 */
;;;383    
;;;384    }
00003a  bd10              POP      {r4,pc}
;;;385    
                          ENDP

                  |L8.60|
                          DCD      0x40003c00
                  |L8.64|
                          DCD      hspi3

                          AREA ||i.MX_USART1_UART_Init||, CODE, READONLY, ALIGN=2

                  MX_USART1_UART_Init PROC
;;;390      */
;;;391    static void MX_USART1_UART_Init(void)
000000  b510              PUSH     {r4,lr}
;;;392    {
;;;393    
;;;394      /* USER CODE BEGIN USART1_Init 0 */
;;;395    
;;;396      /* USER CODE END USART1_Init 0 */
;;;397    
;;;398      /* USER CODE BEGIN USART1_Init 1 */
;;;399    
;;;400      /* USER CODE END USART1_Init 1 */
;;;401      huart1.Instance = USART1;
000002  480f              LDR      r0,|L9.64|
000004  490f              LDR      r1,|L9.68|
000006  6008              STR      r0,[r1,#0]  ; huart1
;;;402      huart1.Init.BaudRate = 19200;
000008  f44f4096          MOV      r0,#0x4b00
00000c  6048              STR      r0,[r1,#4]  ; huart1
;;;403      huart1.Init.WordLength = UART_WORDLENGTH_8B;
00000e  2100              MOVS     r1,#0
000010  480c              LDR      r0,|L9.68|
000012  6081              STR      r1,[r0,#8]
;;;404      huart1.Init.StopBits = UART_STOPBITS_1;
000014  60c1              STR      r1,[r0,#0xc]
;;;405      huart1.Init.Parity = UART_PARITY_NONE;
000016  6101              STR      r1,[r0,#0x10]
;;;406      huart1.Init.Mode = UART_MODE_TX_RX;
000018  210c              MOVS     r1,#0xc
00001a  6141              STR      r1,[r0,#0x14]
;;;407      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
00001c  2100              MOVS     r1,#0
00001e  6181              STR      r1,[r0,#0x18]
;;;408      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
000020  61c1              STR      r1,[r0,#0x1c]
;;;409      if (HAL_UART_Init(&huart1) != HAL_OK)
000022  f7fffffe          BL       HAL_UART_Init
000026  b108              CBZ      r0,|L9.44|
;;;410      {
;;;411        Error_Handler();
000028  f7fffffe          BL       Error_Handler
                  |L9.44|
;;;412      }
;;;413      /* USER CODE BEGIN USART1_Init 2 */
;;;414      if (HAL_UARTEx_ReceiveToIdle_DMA(&huart1, PowerCommandRxBuffer, POWER_COMMAND_DMA_SIZE) != HAL_OK)
00002c  221c              MOVS     r2,#0x1c
00002e  4906              LDR      r1,|L9.72|
000030  4804              LDR      r0,|L9.68|
000032  f7fffffe          BL       HAL_UARTEx_ReceiveToIdle_DMA
000036  b108              CBZ      r0,|L9.60|
;;;415    	{
;;;416        Error_Handler();		
000038  f7fffffe          BL       Error_Handler
                  |L9.60|
;;;417    	}		
;;;418      /* USER CODE END USART1_Init 2 */
;;;419    
;;;420    }
00003c  bd10              POP      {r4,pc}
;;;421    
                          ENDP

00003e  0000              DCW      0x0000
                  |L9.64|
                          DCD      0x40011000
                  |L9.68|
                          DCD      huart1
                  |L9.72|
                          DCD      PowerCommandRxBuffer

                          AREA ||i.MX_USART2_UART_Init||, CODE, READONLY, ALIGN=2

                  MX_USART2_UART_Init PROC
;;;426      */
;;;427    static void MX_USART2_UART_Init(void)
000000  b510              PUSH     {r4,lr}
;;;428    {
;;;429    
;;;430      /* USER CODE BEGIN USART2_Init 0 */
;;;431    
;;;432      /* USER CODE END USART2_Init 0 */
;;;433    
;;;434      /* USER CODE BEGIN USART2_Init 1 */
;;;435    
;;;436      /* USER CODE END USART2_Init 1 */
;;;437      huart2.Instance = USART2;
000002  480b              LDR      r0,|L10.48|
000004  490b              LDR      r1,|L10.52|
000006  6008              STR      r0,[r1,#0]  ; huart2
;;;438      huart2.Init.BaudRate = 115200;
000008  f44f30e1          MOV      r0,#0x1c200
00000c  6048              STR      r0,[r1,#4]  ; huart2
;;;439      huart2.Init.WordLength = UART_WORDLENGTH_8B;
00000e  2100              MOVS     r1,#0
000010  4808              LDR      r0,|L10.52|
000012  6081              STR      r1,[r0,#8]
;;;440      huart2.Init.StopBits = UART_STOPBITS_1;
000014  60c1              STR      r1,[r0,#0xc]
;;;441      huart2.Init.Parity = UART_PARITY_NONE;
000016  6101              STR      r1,[r0,#0x10]
;;;442      huart2.Init.Mode = UART_MODE_TX_RX;
000018  210c              MOVS     r1,#0xc
00001a  6141              STR      r1,[r0,#0x14]
;;;443      huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
00001c  2100              MOVS     r1,#0
00001e  6181              STR      r1,[r0,#0x18]
;;;444      huart2.Init.OverSampling = UART_OVERSAMPLING_16;
000020  61c1              STR      r1,[r0,#0x1c]
;;;445      if (HAL_UART_Init(&huart2) != HAL_OK)
000022  f7fffffe          BL       HAL_UART_Init
000026  b108              CBZ      r0,|L10.44|
;;;446      {
;;;447        Error_Handler();
000028  f7fffffe          BL       Error_Handler
                  |L10.44|
;;;448      }
;;;449      /* USER CODE BEGIN USART2_Init 2 */
;;;450    
;;;451      /* USER CODE END USART2_Init 2 */
;;;452    
;;;453    }
00002c  bd10              POP      {r4,pc}
;;;454    
                          ENDP

00002e  0000              DCW      0x0000
                  |L10.48|
                          DCD      0x40004400
                  |L10.52|
                          DCD      huart2

                          AREA ||i.PHY_Init||, CODE, READONLY, ALIGN=2

                  PHY_Init PROC
;;;658    /* USER CODE BEGIN 4 */
;;;659    void PHY_Init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;660    {
;;;661    	uint32_t startTime;
;;;662    	uint32_t nowTime;
;;;663    	uint32_t elapseTime;
;;;664    	
;;;665    	startTime = HAL_GetTick();
000002  f7fffffe          BL       HAL_GetTick
000006  4605              MOV      r5,r0
;;;666    	elapseTime = 0u;
000008  2600              MOVS     r6,#0
;;;667    	GPIOF->ODR &= 0xffefu;
00000a  480a              LDR      r0,|L11.52|
00000c  6800              LDR      r0,[r0,#0]
00000e  f64f71ef          MOV      r1,#0xffef
000012  4008              ANDS     r0,r0,r1
000014  4907              LDR      r1,|L11.52|
000016  6008              STR      r0,[r1,#0]
;;;668    
;;;669    	while(elapseTime <= 1u)
000018  e003              B        |L11.34|
                  |L11.26|
;;;670    	{
;;;671    		nowTime = HAL_GetTick();
00001a  f7fffffe          BL       HAL_GetTick
00001e  4604              MOV      r4,r0
;;;672    		elapseTime = nowTime - startTime;
000020  1b66              SUBS     r6,r4,r5
                  |L11.34|
000022  2e01              CMP      r6,#1                 ;669
000024  d9f9              BLS      |L11.26|
;;;673    	}
;;;674    
;;;675    	GPIOF->ODR |= ((uint32_t)1u << 4u);
000026  4803              LDR      r0,|L11.52|
000028  6800              LDR      r0,[r0,#0]
00002a  f0400010          ORR      r0,r0,#0x10
00002e  4901              LDR      r1,|L11.52|
000030  6008              STR      r0,[r1,#0]
;;;676    }
000032  bd70              POP      {r4-r6,pc}
;;;677    /* USER CODE END 4 */
                          ENDP

                  |L11.52|
                          DCD      0x40021414

                          AREA ||i.SystemClock_Config||, CODE, READONLY, ALIGN=2

                  SystemClock_Config PROC
;;;163      */
;;;164    void SystemClock_Config(void)
000000  b500              PUSH     {lr}
;;;165    {
000002  b093              SUB      sp,sp,#0x4c
;;;166      RCC_OscInitTypeDef RCC_OscInitStruct = {0};
000004  2130              MOVS     r1,#0x30
000006  a807              ADD      r0,sp,#0x1c
000008  f7fffffe          BL       __aeabi_memclr4
;;;167      RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
00000c  2114              MOVS     r1,#0x14
00000e  a802              ADD      r0,sp,#8
000010  f7fffffe          BL       __aeabi_memclr4
;;;168    
;;;169      /** Configure the main internal regulator output voltage
;;;170      */
;;;171      __HAL_RCC_PWR_CLK_ENABLE();
000014  bf00              NOP      
000016  2000              MOVS     r0,#0
000018  9001              STR      r0,[sp,#4]
00001a  4825              LDR      r0,|L12.176|
00001c  6800              LDR      r0,[r0,#0]
00001e  f0405080          ORR      r0,r0,#0x10000000
000022  4923              LDR      r1,|L12.176|
000024  6008              STR      r0,[r1,#0]
000026  4608              MOV      r0,r1
000028  6800              LDR      r0,[r0,#0]
00002a  f0005080          AND      r0,r0,#0x10000000
00002e  9001              STR      r0,[sp,#4]
000030  bf00              NOP      
000032  bf00              NOP      
;;;172      __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
000034  bf00              NOP      
000036  2000              MOVS     r0,#0
000038  9001              STR      r0,[sp,#4]
00003a  481e              LDR      r0,|L12.180|
00003c  6800              LDR      r0,[r0,#0]
00003e  f4404080          ORR      r0,r0,#0x4000
000042  491c              LDR      r1,|L12.180|
000044  6008              STR      r0,[r1,#0]
000046  4608              MOV      r0,r1
000048  6800              LDR      r0,[r0,#0]
00004a  f4004080          AND      r0,r0,#0x4000
00004e  9001              STR      r0,[sp,#4]
000050  bf00              NOP      
000052  bf00              NOP      
;;;173      /** Initializes the RCC Oscillators according to the specified parameters
;;;174      * in the RCC_OscInitTypeDef structure.
;;;175      */
;;;176      RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
000054  2002              MOVS     r0,#2
000056  9007              STR      r0,[sp,#0x1c]
;;;177      RCC_OscInitStruct.HSIState = RCC_HSI_ON;
000058  2001              MOVS     r0,#1
00005a  900a              STR      r0,[sp,#0x28]
;;;178      RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
00005c  2010              MOVS     r0,#0x10
00005e  900b              STR      r0,[sp,#0x2c]
;;;179      RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
000060  2002              MOVS     r0,#2
000062  900d              STR      r0,[sp,#0x34]
;;;180      RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
000064  2100              MOVS     r1,#0
000066  910e              STR      r1,[sp,#0x38]
;;;181      RCC_OscInitStruct.PLL.PLLM = 8;
000068  2108              MOVS     r1,#8
00006a  910f              STR      r1,[sp,#0x3c]
;;;182      RCC_OscInitStruct.PLL.PLLN = 168;
00006c  21a8              MOVS     r1,#0xa8
00006e  9110              STR      r1,[sp,#0x40]
;;;183      RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
000070  2102              MOVS     r1,#2
000072  9111              STR      r1,[sp,#0x44]
;;;184      RCC_OscInitStruct.PLL.PLLQ = 4;
000074  2104              MOVS     r1,#4
000076  9112              STR      r1,[sp,#0x48]
;;;185      if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
000078  a807              ADD      r0,sp,#0x1c
00007a  f7fffffe          BL       HAL_RCC_OscConfig
00007e  b108              CBZ      r0,|L12.132|
;;;186      {
;;;187        Error_Handler();
000080  f7fffffe          BL       Error_Handler
                  |L12.132|
;;;188      }
;;;189      /** Initializes the CPU, AHB and APB buses clocks
;;;190      */
;;;191      RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
000084  200f              MOVS     r0,#0xf
000086  9002              STR      r0,[sp,#8]
;;;192                                  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
;;;193      RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
000088  2002              MOVS     r0,#2
00008a  9003              STR      r0,[sp,#0xc]
;;;194      RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
00008c  2000              MOVS     r0,#0
00008e  9004              STR      r0,[sp,#0x10]
;;;195      RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
000090  f44f50a0          MOV      r0,#0x1400
000094  9005              STR      r0,[sp,#0x14]
;;;196      RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
000096  f44f5080          MOV      r0,#0x1000
00009a  9006              STR      r0,[sp,#0x18]
;;;197    
;;;198      if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
00009c  2105              MOVS     r1,#5
00009e  a802              ADD      r0,sp,#8
0000a0  f7fffffe          BL       HAL_RCC_ClockConfig
0000a4  b108              CBZ      r0,|L12.170|
;;;199      {
;;;200        Error_Handler();
0000a6  f7fffffe          BL       Error_Handler
                  |L12.170|
;;;201      }
;;;202    }
0000aa  b013              ADD      sp,sp,#0x4c
0000ac  bd00              POP      {pc}
;;;203    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L12.176|
                          DCD      0x40023840
                  |L12.180|
                          DCD      0x40007000

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;87       */
;;;88     int main(void)
000000  f7fffffe          BL       HAL_Init
;;;89     {
;;;90       /* USER CODE BEGIN 1 */
;;;91     	uint32_t nowTime;
;;;92     	uint32_t elapseTime;
;;;93     	uint32_t startTime;
;;;94       /* USER CODE END 1 */
;;;95     
;;;96       /* MCU Configuration--------------------------------------------------------*/
;;;97     
;;;98       /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
;;;99       HAL_Init();
;;;100    
;;;101      /* USER CODE BEGIN Init */
;;;102    
;;;103      /* USER CODE END Init */
;;;104    
;;;105      /* Configure the system clock */
;;;106      SystemClock_Config();
000004  f7fffffe          BL       SystemClock_Config
;;;107    
;;;108      /* USER CODE BEGIN SysInit */
;;;109    
;;;110      /* USER CODE END SysInit */
;;;111    
;;;112      /* Initialize all configured peripherals */
;;;113      MX_GPIO_Init();
000008  f7fffffe          BL       MX_GPIO_Init
;;;114      MX_SPI3_Init();
00000c  f7fffffe          BL       MX_SPI3_Init
;;;115      MX_CAN1_Init();
000010  f7fffffe          BL       MX_CAN1_Init
;;;116      MX_I2C1_Init();
000014  f7fffffe          BL       MX_I2C1_Init
;;;117      MX_I2C2_Init() ;
000018  f7fffffe          BL       MX_I2C2_Init
;;;118      MX_I2C3_Init();
00001c  f7fffffe          BL       MX_I2C3_Init
;;;119      MX_USART1_UART_Init();
000020  f7fffffe          BL       MX_USART1_UART_Init
;;;120      MX_DMA_Init();
000024  f7fffffe          BL       MX_DMA_Init
;;;121      MX_USART2_UART_Init();
000028  f7fffffe          BL       MX_USART2_UART_Init
;;;122      /* USER CODE BEGIN 2 */
;;;123        EcatHspiPtr = &hspi3;
00002c  480e              LDR      r0,|L13.104|
00002e  490f              LDR      r1,|L13.108|
000030  6008              STR      r0,[r1,#0]  ; EcatHspiPtr
;;;124    		I2C_Ptr_24V = &hi2c1;
000032  480f              LDR      r0,|L13.112|
000034  490f              LDR      r1,|L13.116|
000036  6008              STR      r0,[r1,#0]  ; I2C_Ptr_24V
;;;125    		I2C_Ptr_48V_NTC = &hi2c3;
000038  480f              LDR      r0,|L13.120|
00003a  4910              LDR      r1,|L13.124|
00003c  6008              STR      r0,[r1,#0]  ; I2C_Ptr_48V_NTC
;;;126    		I2C_Ptr_AI = &hi2c2;
00003e  4810              LDR      r0,|L13.128|
000040  4910              LDR      r1,|L13.132|
000042  6008              STR      r0,[r1,#0]  ; I2C_Ptr_AI
;;;127    		Uart_HandlePtr = &huart1;
000044  4810              LDR      r0,|L13.136|
000046  4911              LDR      r1,|L13.140|
000048  6008              STR      r0,[r1,#0]  ; Uart_HandlePtr
;;;128    		Udma_UartRx_HandlePtr = &hdma_usart1_rx;
00004a  4811              LDR      r0,|L13.144|
00004c  4911              LDR      r1,|L13.148|
00004e  6008              STR      r0,[r1,#0]  ; Udma_UartRx_HandlePtr
;;;129    //		Udma_Uarttx_HandlePtr = &hdma_usart1_tx;
;;;130    //    LAN9252_Init();
;;;131    //    MainInit();
;;;132    //    bRunApplication = TRUE;
;;;133    //		PHY_Init();
;;;134    //		HAL_GPIO_WritePin(OC_PROTECT_GPIO_Port, OC_PROTECT_Pin, GPIO_PIN_RESET);
;;;135    //		HAL_GPIO_WritePin(V24V_OUT1_GPIO_Port, V24V_OUT1_Pin, GPIO_PIN_SET);
;;;136    //		HAL_GPIO_WritePin(ES_SHUTDOWN_GPIO_Port, ES_SHUTDOWN_Pin, GPIO_PIN_SET);		
;;;137    		
;;;138    		ADS1115_Driver_Initilization();
000050  f7fffffe          BL       ADS1115_Driver_Initilization
;;;139    //		Power_Command_Initilization();
;;;140      /* USER CODE END 2 */
;;;141    
;;;142      /* Infinite loop */
;;;143      /* USER CODE BEGIN WHILE */
;;;144      while (1)
000054  e007              B        |L13.102|
                  |L13.86|
;;;145      {
;;;146    //		MainLoop();
;;;147    
;;;148    		ADS1115_Driver_MainLoop();
000056  f7fffffe          BL       ADS1115_Driver_MainLoop
;;;149    		work_mode_operation();
00005a  f7fffffe          BL       work_mode_operation
;;;150    		KeyScan(power_manage.work_mode);
00005e  490e              LDR      r1,|L13.152|
000060  7888              LDRB     r0,[r1,#2]  ; power_manage
000062  f7fffffe          BL       KeyScan
                  |L13.102|
000066  e7f6              B        |L13.86|
;;;151    		
;;;152    		
;;;153        /* USER CODE END WHILE */
;;;154    
;;;155        /* USER CODE BEGIN 3 */
;;;156      }
;;;157      /* USER CODE END 3 */
;;;158    }
;;;159    
                          ENDP

                  |L13.104|
                          DCD      hspi3
                  |L13.108|
                          DCD      EcatHspiPtr
                  |L13.112|
                          DCD      hi2c1
                  |L13.116|
                          DCD      I2C_Ptr_24V
                  |L13.120|
                          DCD      hi2c3
                  |L13.124|
                          DCD      I2C_Ptr_48V_NTC
                  |L13.128|
                          DCD      hi2c2
                  |L13.132|
                          DCD      I2C_Ptr_AI
                  |L13.136|
                          DCD      huart1
                  |L13.140|
                          DCD      Uart_HandlePtr
                  |L13.144|
                          DCD      hdma_usart1_rx
                  |L13.148|
                          DCD      Udma_UartRx_HandlePtr
                  |L13.152|
                          DCD      power_manage

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  hcan1
                          %        40
                  hi2c1
                          %        84
                  hi2c2
                          %        84
                  hi2c3
                          %        84
                  hspi3
                          %        88
                  huart1
                          %        68
                  huart2
                          %        68
                  hdma_usart1_rx
                          %        96

;*** Start embedded assembler ***

#line 1 "RTE\\Device\\STM32F407ZETx\\STCubeGenerated\\Src\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REV16|
#line 388 "D:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_main____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REVSH|
#line 402
|__asm___6_main_c_main____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____RRX|
#line 587
|__asm___6_main_c_main____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
