; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\robot-device.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\robot-device.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\etherCAT -I.\Power -I.\CRC -IC:\Users\LENOVO\Desktop\slavecontroller\RTE -IC:\Users\LENOVO\Desktop\slavecontroller\RTE\Device\STM32F407ZETx -IC:\Users\LENOVO\Desktop\slavecontroller\RTE\Device\STM32F407ZETx\STCubeGenerated\Inc -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.16.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.16.0\Drivers\STM32F4xx_HAL_Driver\Inc -ISTCubeGenerated\Inc -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F407xx --omf_browse=.\objects\robot-device.crf etherCAT\Robot-Device.c]
                          THUMB

                          AREA ||i.APPL_AckErrorInd||, CODE, READONLY, ALIGN=1

                  APPL_AckErrorInd PROC
;;;60     
;;;61     void    APPL_AckErrorInd(UINT16 stateTrans)
000000  4770              BX       lr
;;;62     {
;;;63     
;;;64     }
;;;65     
                          ENDP


                          AREA ||i.APPL_Application||, CODE, READONLY, ALIGN=1

                  APPL_Application PROC
;;;301    *////////////////////////////////////////////////////////////////////////////////////////
;;;302    void APPL_Application(void)
000000  4770              BX       lr
;;;303    {
;;;304    //#if _WIN32
;;;305    //   #pragma message ("Warning: Implement the slave application")
;;;306    //#else
;;;307    //    #warning "Implement the slave application"
;;;308    //#endif
;;;309    }
;;;310    
                          ENDP


                          AREA ||i.APPL_GenerateMapping||, CODE, READONLY, ALIGN=2

                  APPL_GenerateMapping PROC
;;;180    *////////////////////////////////////////////////////////////////////////////////////////
;;;181    UINT16 APPL_GenerateMapping(UINT16 *pInputSize,UINT16 *pOutputSize)
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;182    {
000004  b081              SUB      sp,sp,#4
000006  4681              MOV      r9,r0
;;;183        UINT16 result = ALSTATUSCODE_NOERROR;
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
;;;184        UINT16 InputSize = 0;
00000c  2700              MOVS     r7,#0
;;;185        UINT16 OutputSize = 0;
00000e  4680              MOV      r8,r0
;;;186    
;;;187    #if COE_SUPPORTED
;;;188        UINT16 PDOAssignEntryCnt = 0;
000010  2500              MOVS     r5,#0
;;;189        OBJCONST TOBJECT OBJMEM * pPDO = NULL;
000012  2400              MOVS     r4,#0
;;;190        UINT16 PDOSubindex0 = 0;
000014  4682              MOV      r10,r0
;;;191        UINT32 *pPDOEntry = NULL;
000016  4683              MOV      r11,r0
;;;192        UINT16 PDOEntryCnt = 0;
000018  2600              MOVS     r6,#0
;;;193       
;;;194    #if MAX_PD_OUTPUT_SIZE > 0
;;;195        /*Scan object 0x1C12 RXPDO assign*/
;;;196        for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sRxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
00001a  bf00              NOP      
00001c  e025              B        |L3.106|
                  |L3.30|
;;;197        {
;;;198            pPDO = OBJ_GetObjectHandle(sRxPDOassign.aEntries[PDOAssignEntryCnt]);
00001e  4934              LDR      r1,|L3.240|
000020  f8310015          LDRH     r0,[r1,r5,LSL #1]
000024  f7fffffe          BL       OBJ_GetObjectHandle
000028  4604              MOV      r4,r0
;;;199            if(pPDO != NULL)
00002a  b1bc              CBZ      r4,|L3.92|
;;;200            {
;;;201                PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
00002c  69a0              LDR      r0,[r4,#0x18]
00002e  f8b0a000          LDRH     r10,[r0,#0]
;;;202                for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
000032  2600              MOVS     r6,#0
000034  e00f              B        |L3.86|
                  |L3.54|
;;;203                {
;;;204                    pPDOEntry = (UINT32 *)(((UINT16 *)pPDO->pVarPtr) + (OBJ_GetEntryOffset((PDOEntryCnt+1),pPDO)>>4));    //goto PDO entry
000036  1c71              ADDS     r1,r6,#1
000038  b2c8              UXTB     r0,r1
00003a  4621              MOV      r1,r4
00003c  f7fffffe          BL       OBJ_GetEntryOffset
000040  1100              ASRS     r0,r0,#4
000042  69a1              LDR      r1,[r4,#0x18]
000044  eb010b40          ADD      r11,r1,r0,LSL #1
;;;205                    // we increment the expected output size depending on the mapped Entry
;;;206                    OutputSize += (UINT16) ((*pPDOEntry) & 0xFF);
000048  f89b0000          LDRB     r0,[r11,#0]
00004c  4440              ADD      r0,r0,r8
00004e  fa1ff880          UXTH     r8,r0
000052  1c70              ADDS     r0,r6,#1              ;202
000054  b286              UXTH     r6,r0                 ;202
                  |L3.86|
000056  4556              CMP      r6,r10                ;202
000058  dbed              BLT      |L3.54|
00005a  e004              B        |L3.102|
                  |L3.92|
;;;207                }
;;;208            }
;;;209            else
;;;210            {
;;;211                /*assigned PDO was not found in object dictionary. return invalid mapping*/
;;;212                OutputSize = 0;
00005c  f04f0800          MOV      r8,#0
;;;213                result = ALSTATUSCODE_INVALIDOUTPUTMAPPING;
000060  2025              MOVS     r0,#0x25
000062  9000              STR      r0,[sp,#0]
;;;214                break;
000064  e006              B        |L3.116|
                  |L3.102|
000066  1c68              ADDS     r0,r5,#1              ;196
000068  b285              UXTH     r5,r0                 ;196
                  |L3.106|
00006a  4821              LDR      r0,|L3.240|
00006c  1e80              SUBS     r0,r0,#2              ;196
00006e  8800              LDRH     r0,[r0,#0]            ;196  ; sRxPDOassign
000070  42a8              CMP      r0,r5                 ;196
000072  dcd4              BGT      |L3.30|
                  |L3.116|
000074  bf00              NOP      
;;;215            }
;;;216        }
;;;217    
;;;218        OutputSize = (OutputSize + 7) >> 3;
000076  f1080007          ADD      r0,r8,#7
00007a  ea4f08e0          ASR      r8,r0,#3
;;;219    #endif
;;;220    
;;;221    #if MAX_PD_INPUT_SIZE > 0
;;;222        if(result == 0)
00007e  9800              LDR      r0,[sp,#0]
000080  bb58              CBNZ     r0,|L3.218|
;;;223        {
;;;224            /*Scan Object 0x1C13 TXPDO assign*/
;;;225            for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sTxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
000082  2500              MOVS     r5,#0
000084  e023              B        |L3.206|
                  |L3.134|
;;;226            {
;;;227                pPDO = OBJ_GetObjectHandle(sTxPDOassign.aEntries[PDOAssignEntryCnt]);
000086  491b              LDR      r1,|L3.244|
000088  f8310015          LDRH     r0,[r1,r5,LSL #1]
00008c  f7fffffe          BL       OBJ_GetObjectHandle
000090  4604              MOV      r4,r0
;;;228                if(pPDO != NULL)
000092  b1b4              CBZ      r4,|L3.194|
;;;229                {
;;;230                    PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
000094  69a0              LDR      r0,[r4,#0x18]
000096  f8b0a000          LDRH     r10,[r0,#0]
;;;231                    for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
00009a  2600              MOVS     r6,#0
00009c  e00e              B        |L3.188|
                  |L3.158|
;;;232                    {
;;;233                        pPDOEntry = (UINT32 *)(((UINT16 *)pPDO->pVarPtr) + (OBJ_GetEntryOffset((PDOEntryCnt+1),pPDO)>>4));    //goto PDO entry
00009e  1c71              ADDS     r1,r6,#1
0000a0  b2c8              UXTB     r0,r1
0000a2  4621              MOV      r1,r4
0000a4  f7fffffe          BL       OBJ_GetEntryOffset
0000a8  1100              ASRS     r0,r0,#4
0000aa  69a1              LDR      r1,[r4,#0x18]
0000ac  eb010b40          ADD      r11,r1,r0,LSL #1
;;;234                        // we increment the expected output size depending on the mapped Entry
;;;235                        InputSize += (UINT16) ((*pPDOEntry) & 0xFF);
0000b0  f89b0000          LDRB     r0,[r11,#0]
0000b4  4438              ADD      r0,r0,r7
0000b6  b287              UXTH     r7,r0
0000b8  1c70              ADDS     r0,r6,#1              ;231
0000ba  b286              UXTH     r6,r0                 ;231
                  |L3.188|
0000bc  4556              CMP      r6,r10                ;231
0000be  dbee              BLT      |L3.158|
0000c0  e003              B        |L3.202|
                  |L3.194|
;;;236                    }
;;;237                }
;;;238                else
;;;239                {
;;;240                    /*assigned PDO was not found in object dictionary. return invalid mapping*/
;;;241                    InputSize = 0;
0000c2  2700              MOVS     r7,#0
;;;242                    result = ALSTATUSCODE_INVALIDINPUTMAPPING;
0000c4  2024              MOVS     r0,#0x24
0000c6  9000              STR      r0,[sp,#0]
;;;243                    break;
0000c8  e006              B        |L3.216|
                  |L3.202|
0000ca  1c68              ADDS     r0,r5,#1              ;225
0000cc  b285              UXTH     r5,r0                 ;225
                  |L3.206|
0000ce  4809              LDR      r0,|L3.244|
0000d0  1e80              SUBS     r0,r0,#2              ;225
0000d2  8800              LDRH     r0,[r0,#0]            ;225  ; sTxPDOassign
0000d4  42a8              CMP      r0,r5                 ;225
0000d6  dcd6              BGT      |L3.134|
                  |L3.216|
0000d8  bf00              NOP      
                  |L3.218|
;;;244                }
;;;245            }
;;;246        }
;;;247        InputSize = (InputSize + 7) >> 3;
0000da  1df8              ADDS     r0,r7,#7
0000dc  10c7              ASRS     r7,r0,#3
;;;248    #endif
;;;249    
;;;250    #else
;;;251    #if _WIN32
;;;252       #pragma message ("Warning: Define 'InputSize' and 'OutputSize'.")
;;;253    #else
;;;254        #warning "Define 'InputSize' and 'OutputSize'."
;;;255    #endif
;;;256    #endif
;;;257    
;;;258        *pInputSize = InputSize;
0000de  f8a97000          STRH     r7,[r9,#0]
;;;259        *pOutputSize = OutputSize;
0000e2  9802              LDR      r0,[sp,#8]
0000e4  f8a08000          STRH     r8,[r0,#0]
;;;260        return result;
0000e8  9800              LDR      r0,[sp,#0]
;;;261    }
0000ea  e8bd8ffe          POP      {r1-r11,pc}
;;;262    
                          ENDP

0000ee  0000              DCW      0x0000
                  |L3.240|
                          DCD      sRxPDOassign+0x2
                  |L3.244|
                          DCD      sTxPDOassign+0x2

                          AREA ||i.APPL_GetDeviceID||, CODE, READONLY, ALIGN=1

                  APPL_GetDeviceID PROC
;;;317    *////////////////////////////////////////////////////////////////////////////////////////
;;;318    UINT16 APPL_GetDeviceID()
000000  2005              MOVS     r0,#5
;;;319    {
;;;320    //#if _WIN32
;;;321    //   #pragma message ("Warning: Implement explicit Device ID latching")
;;;322    //#else
;;;323    //    #warning "Implement explicit Device ID latching"
;;;324    //#endif
;;;325        /* Explicit Device 5 is expected by Explicit Device ID conformance tests*/
;;;326        return 0x5;
;;;327    }
000002  4770              BX       lr
;;;328    #endif
                          ENDP


                          AREA ||i.APPL_InputMapping||, CODE, READONLY, ALIGN=2

                  APPL_InputMapping PROC
;;;269    *////////////////////////////////////////////////////////////////////////////////////////
;;;270    void APPL_InputMapping(UINT16* pData)
000000  b510              PUSH     {r4,lr}
;;;271    {
000002  4604              MOV      r4,r0
;;;272    //#if _WIN32
;;;273    //   #pragma message ("Warning: Implement input (Slave->Master) mapping")
;;;274    //#else
;;;275    //    #warning "Implement input (Slave->Master) mapping"
;;;276    //#endif
;;;277    		memcpy((UINT8*)pData,(UINT8*)&IN_GENERIC0x6000 + 2,sizeof(IN_GENERIC0x6000) - 2);
000004  2246              MOVS     r2,#0x46
000006  4902              LDR      r1,|L5.16|
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       __aeabi_memcpy
;;;278    }
00000e  bd10              POP      {r4,pc}
;;;279    
                          ENDP

                  |L5.16|
                          DCD      IN_GENERIC0x6000+0x2

                          AREA ||i.APPL_OutputMapping||, CODE, READONLY, ALIGN=2

                  APPL_OutputMapping PROC
;;;286    *////////////////////////////////////////////////////////////////////////////////////////
;;;287    void APPL_OutputMapping(UINT16* pData)
000000  b510              PUSH     {r4,lr}
;;;288    {
000002  4604              MOV      r4,r0
;;;289    //#if _WIN32
;;;290    //   #pragma message ("Warning: Implement output (Master->Slave) mapping")
;;;291    //#else
;;;292    //    #warning "Implement output (Master->Slave) mapping"
;;;293    //#endif
;;;294    		memcpy((UINT8*)&OUT_GENERIC0x7000 + 2,(UINT8*)pData,sizeof(OUT_GENERIC0x7000) - 2);
000004  223c              MOVS     r2,#0x3c
000006  4621              MOV      r1,r4
000008  4801              LDR      r0,|L6.16|
00000a  f7fffffe          BL       __aeabi_memcpy
;;;295    }
00000e  bd10              POP      {r4,pc}
;;;296    
                          ENDP

                  |L6.16|
                          DCD      OUT_GENERIC0x7000+0x2

                          AREA ||i.APPL_StartInputHandler||, CODE, READONLY, ALIGN=1

                  APPL_StartInputHandler PROC
;;;116    
;;;117    UINT16 APPL_StartInputHandler(UINT16 *pIntMask)
000000  4601              MOV      r1,r0
;;;118    {
;;;119        return ALSTATUSCODE_NOERROR;
000002  2000              MOVS     r0,#0
;;;120    }
000004  4770              BX       lr
;;;121    
                          ENDP


                          AREA ||i.APPL_StartMailboxHandler||, CODE, READONLY, ALIGN=1

                  APPL_StartMailboxHandler PROC
;;;79     
;;;80     UINT16 APPL_StartMailboxHandler(void)
000000  2000              MOVS     r0,#0
;;;81     {
;;;82         return ALSTATUSCODE_NOERROR;
;;;83     }
000002  4770              BX       lr
;;;84     
                          ENDP


                          AREA ||i.APPL_StartOutputHandler||, CODE, READONLY, ALIGN=1

                  APPL_StartOutputHandler PROC
;;;150    
;;;151    UINT16 APPL_StartOutputHandler(void)
000000  2000              MOVS     r0,#0
;;;152    {
;;;153        return ALSTATUSCODE_NOERROR;
;;;154    }
000002  4770              BX       lr
;;;155    
                          ENDP


                          AREA ||i.APPL_StopInputHandler||, CODE, READONLY, ALIGN=1

                  APPL_StopInputHandler PROC
;;;132    
;;;133    UINT16 APPL_StopInputHandler(void)
000000  2000              MOVS     r0,#0
;;;134    {
;;;135        return ALSTATUSCODE_NOERROR;
;;;136    }
000002  4770              BX       lr
;;;137    
                          ENDP


                          AREA ||i.APPL_StopMailboxHandler||, CODE, READONLY, ALIGN=1

                  APPL_StopMailboxHandler PROC
;;;95     
;;;96     UINT16 APPL_StopMailboxHandler(void)
000000  2000              MOVS     r0,#0
;;;97     {
;;;98         return ALSTATUSCODE_NOERROR;
;;;99     }
000002  4770              BX       lr
;;;100    
                          ENDP


                          AREA ||i.APPL_StopOutputHandler||, CODE, READONLY, ALIGN=1

                  APPL_StopOutputHandler PROC
;;;166    
;;;167    UINT16 APPL_StopOutputHandler(void)
000000  2000              MOVS     r0,#0
;;;168    {
;;;169        return ALSTATUSCODE_NOERROR;
;;;170    }
000002  4770              BX       lr
;;;171    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  OUT_GENERICProcessDataMapping0x1600
000000  0041              DCW      0x0041
000002  0000              DCB      0x00,0x00
                          DCD      0x70000101
                          DCD      0x70000201
                          DCD      0x70000301
                          DCD      0x70000401
                          DCD      0x70000501
                          DCD      0x70000601
                          DCD      0x70000701
                          DCD      0x70000801
                          DCD      0x70000901
                          DCD      0x70000a01
                          DCD      0x70000b01
                          DCD      0x70000c01
                          DCD      0x70000d01
                          DCD      0x70000e01
                          DCD      0x70000f01
                          DCD      0x70001001
                          DCD      0x70001110
                          DCD      0x70001210
                          DCD      0x70001308
                          DCD      0x70001408
                          DCD      0x70001508
                          DCD      0x70001608
                          DCD      0x70001708
                          DCD      0x70001808
                          DCD      0x70001908
                          DCD      0x70001a08
                          DCD      0x70001b08
                          DCD      0x70001c08
                          DCD      0x70001d08
                          DCD      0x70001e08
                          DCD      0x70001f08
                          DCD      0x70002008
                          DCD      0x70002108
                          DCD      0x70002208
                          DCD      0x70002308
                          DCD      0x70002408
                          DCD      0x70002508
                          DCD      0x70002608
                          DCD      0x70002708
                          DCD      0x70002808
                          DCD      0x70002908
                          DCD      0x70002a08
                          DCD      0x70002b08
                          DCD      0x70002c08
                          DCD      0x70002d08
                          DCD      0x70002e08
                          DCD      0x70002f08
                          DCD      0x70003008
                          DCD      0x70003108
                          DCD      0x70003208
                          DCD      0x70003310
                          DCD      0x70003410
                          DCD      0x70003510
                          DCD      0x70003608
                          DCD      0x70003708
                          DCD      0x70003808
                          DCD      0x70003908
                          DCD      0x70003a08
                          DCD      0x70003b08
                          DCD      0x70003c08
                          DCD      0x70003d08
                          DCD      0x70003e10
                          DCD      0x70003f10
                          DCD      0x70004010
                          DCD      0x70004110
                  IN_GENERICProcessDataMapping0x1A00
000108  0044              DCW      0x0044
00010a  0000              DCB      0x00,0x00
                          DCD      0x60000101
                          DCD      0x60000201
                          DCD      0x60000301
                          DCD      0x60000401
                          DCD      0x60000501
                          DCD      0x60000601
                          DCD      0x60000701
                          DCD      0x60000801
                          DCD      0x60000901
                          DCD      0x60000a01
                          DCD      0x60000b01
                          DCD      0x60000c01
                          DCD      0x60000d01
                          DCD      0x60000e01
                          DCD      0x60000f01
                          DCD      0x60001001
                          DCD      0x60001110
                          DCD      0x60001210
                          DCD      0x60001310
                          DCD      0x60001410
                          DCD      0x60001510
                          DCD      0x60001610
                          DCD      0x60001708
                          DCD      0x60001808
                          DCD      0x60001908
                          DCD      0x60001a08
                          DCD      0x60001b08
                          DCD      0x60001c08
                          DCD      0x60001d08
                          DCD      0x60001e08
                          DCD      0x60001f08
                          DCD      0x60002008
                          DCD      0x60002108
                          DCD      0x60002208
                          DCD      0x60002308
                          DCD      0x60002408
                          DCD      0x60002508
                          DCD      0x60002608
                          DCD      0x60002708
                          DCD      0x60002808
                          DCD      0x60002908
                          DCD      0x60002a08
                          DCD      0x60002b08
                          DCD      0x60002c08
                          DCD      0x60002d08
                          DCD      0x60002e08
                          DCD      0x60002f08
                          DCD      0x60003008
                          DCD      0x60003108
                          DCD      0x60003208
                          DCD      0x60003308
                          DCD      0x60003408
                          DCD      0x60003508
                          DCD      0x60003608
                          DCD      0x60003710
                          DCD      0x60003810
                          DCD      0x60003910
                          DCD      0x60003a08
                          DCD      0x60003b08
                          DCD      0x60003c08
                          DCD      0x60003d08
                          DCD      0x60003e08
                          DCD      0x60003f08
                          DCD      0x60004008
                          DCD      0x60004108
                          DCD      0x60004210
                          DCD      0x60004320
                          DCD      0x60004410
                  sRxPDOassign
00021c  00011600          DCW      0x0001,0x1600
                  sTxPDOassign
000220  00011a00          DCW      0x0001,0x1a00
                  IN_GENERIC0x6000
000224  0044              DCW      0x0044
000226  0000              DCB      0x00,0x00
000228  00000000          DCW      0x0000,0x0000
00022c  00000000          DCW      0x0000,0x0000
000230  00000000          DCW      0x0000,0x0000
000234  00000000          DCB      0x00,0x00,0x00,0x00
000238  00000000          DCB      0x00,0x00,0x00,0x00
00023c  00000000          DCB      0x00,0x00,0x00,0x00
000240  00000000          DCB      0x00,0x00,0x00,0x00
000244  00000000          DCB      0x00,0x00,0x00,0x00
000248  00000000          DCB      0x00,0x00,0x00,0x00
00024c  00000000          DCB      0x00,0x00,0x00,0x00
000250  00000000          DCB      0x00,0x00,0x00,0x00
000254  00000000          DCW      0x0000,0x0000
000258  0000              DCW      0x0000
00025a  0000              DCB      0x00,0x00
00025c  00000000          DCB      0x00,0x00,0x00,0x00
000260  0000              DCB      0x00,0x00
000262  0000              DCW      0x0000
                          DCD      0x00000000
000268  0000              DCW      0x0000
00026a  0000              DCB      0x00,0x00
                  OUT_GENERIC0x7000
00026c  0041              DCW      0x0041
00026e  0000              DCB      0x00,0x00
000270  00000000          DCW      0x0000,0x0000
000274  00000000          DCB      0x00,0x00,0x00,0x00
000278  00000000          DCB      0x00,0x00,0x00,0x00
00027c  00000000          DCB      0x00,0x00,0x00,0x00
000280  00000000          DCB      0x00,0x00,0x00,0x00
000284  00000000          DCB      0x00,0x00,0x00,0x00
000288  00000000          DCB      0x00,0x00,0x00,0x00
00028c  00000000          DCB      0x00,0x00,0x00,0x00
000290  00000000          DCB      0x00,0x00,0x00,0x00
000294  00000000          DCW      0x0000,0x0000
000298  0000              DCW      0x0000
00029a  0000              DCB      0x00,0x00
00029c  00000000          DCB      0x00,0x00,0x00,0x00
0002a0  0000              DCB      0x00,0x00
0002a2  0000              DCW      0x0000
0002a4  00000000          DCW      0x0000,0x0000
0002a8  0000              DCW      0x0000
0002aa  0000              DCB      0x00,0x00
                  ParameterConfiguration0x8000
0002ac  0014              DCW      0x0014
0002ae  0000              DCB      0x00,0x00
                          DCD      0x0001c200
                          DCD      0x000001f4
0002b8  07d00000          DCW      0x07d0,0x0000
0002bc  00000000          DCW      0x0000,0x0000
0002c0  0000004b          DCW      0x0000,0x004b
0002c4  00060028          DCW      0x0006,0x0028
0002c8  003c0004          DCW      0x003c,0x0004
0002cc  00000055          DCW      0x0000,0x0055
0002d0  07d00005          DCW      0x07d0,0x0005
0002d4  00001388          DCW      0x0000,0x1388
0002d8  03e80000          DCW      0x03e8,0x0000
                  ModularDeviceProfile0xF000
0002dc  00020010          DCW      0x0002,0x0010
0002e0  0000              DCW      0x0000

;*** Start embedded assembler ***

#line 1 "etherCAT\\Robot-Device.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_Robot_Device_c_4350e473____REV16|
#line 388 "D:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___14_Robot_Device_c_4350e473____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_Robot_Device_c_4350e473____REVSH|
#line 402
|__asm___14_Robot_Device_c_4350e473____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_Robot_Device_c_4350e473____RRX|
#line 587
|__asm___14_Robot_Device_c_4350e473____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
