; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\ecatfoe.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\ecatfoe.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\etherCAT -I.\Power -I.\CRC -IC:\Users\LENOVO\Desktop\slavecontroller\RTE -IC:\Users\LENOVO\Desktop\slavecontroller\RTE\Device\STM32F407ZETx -IC:\Users\LENOVO\Desktop\slavecontroller\RTE\Device\STM32F407ZETx\STCubeGenerated\Inc -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.16.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.16.0\Drivers\STM32F4xx_HAL_Driver\Inc -ISTCubeGenerated\Inc -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F407xx --omf_browse=.\objects\ecatfoe.crf etherCAT\ecatfoe.c]
                          THUMB

                          AREA ||i.FOE_ContinueInd||, CODE, READONLY, ALIGN=2

                  FOE_ContinueInd PROC
;;;399    
;;;400    void FOE_ContinueInd(TMBX MBXMEM * pMbx)
000000  b510              PUSH     {r4,lr}
;;;401    {
000002  4604              MOV      r4,r0
;;;402        if ( pFoeSendStored )
000004  4806              LDR      r0,|L1.32|
000006  6800              LDR      r0,[r0,#0]  ; pFoeSendStored
000008  b140              CBZ      r0,|L1.28|
;;;403        {
;;;404            /* send the stored FoE service which could not be sent before */
;;;405    /*ECATCHANGE_START(V5.13) FOE1*/
;;;406            if (MBX_MailboxSendReq(pFoeSendStored, FOE_SERVICE) == 0)
00000a  2140              MOVS     r1,#0x40
00000c  4804              LDR      r0,|L1.32|
00000e  6800              LDR      r0,[r0,#0]  ; pFoeSendStored
000010  f7fffffe          BL       MBX_MailboxSendReq
000014  b910              CBNZ     r0,|L1.28|
;;;407            {
;;;408                pFoeSendStored = 0;
000016  2000              MOVS     r0,#0
000018  4901              LDR      r1,|L1.32|
00001a  6008              STR      r0,[r1,#0]  ; pFoeSendStored
                  |L1.28|
;;;409            }
;;;410        }
;;;411    /*ECATCHANGE_END(V5.13) EOE1*/
;;;412    }
00001c  bd10              POP      {r4,pc}
;;;413    
                          ENDP

00001e  0000              DCW      0x0000
                  |L1.32|
                          DCD      pFoeSendStored

                          AREA ||i.FOE_Init||, CODE, READONLY, ALIGN=2

                  FOE_Init PROC
;;;80     
;;;81     void FOE_Init(void)
000000  2000              MOVS     r0,#0
;;;82     {
;;;83         /* no file transmission sequence is running */
;;;84         u16FileAccessState    = FOE_READY;
000002  4903              LDR      r1,|L2.16|
000004  8008              STRH     r0,[r1,#0]
;;;85         /* initialize the expected packet number */
;;;86         u32PacketNo = 0;
000006  4903              LDR      r1,|L2.20|
000008  6008              STR      r0,[r1,#0]  ; u32PacketNo
;;;87         pFoeSendStored = NULL;
00000a  4903              LDR      r1,|L2.24|
00000c  6008              STR      r0,[r1,#0]  ; pFoeSendStored
;;;88     }
00000e  4770              BX       lr
;;;89     
                          ENDP

                  |L2.16|
                          DCD      u16FileAccessState
                  |L2.20|
                          DCD      u32PacketNo
                  |L2.24|
                          DCD      pFoeSendStored

                          AREA ||i.FOE_ServiceInd||, CODE, READONLY, ALIGN=2

                  FOE_ServiceInd PROC
;;;101    
;;;102    UINT8 FOE_ServiceInd(TFOEMBX MBXMEM * pFoeInd)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;103    {
000004  4604              MOV      r4,r0
;;;104        /* initialize the result of the service checking */
;;;105        UINT16 nextState = ECAT_FOE_ERRCODE_ILLEGAL;
000006  f2480504          MOV      r5,#0x8004
;;;106        /* dataSize contains the size of the file data */
;;;107        UINT16 dataSize = SWAPWORD(pFoeInd->MbxHeader.Length) - FOE_HEADER_SIZE;
00000a  8820              LDRH     r0,[r4,#0]
00000c  1f80              SUBS     r0,r0,#6
00000e  b286              UXTH     r6,r0
;;;108    
;;;109    
;;;110        /* it has to be checked if the mailbox protocol is correct, the sent mailbox data length has to
;;;111           great enough for the service header of the FoE service */
;;;112        if ( SWAPWORD(pFoeInd->MbxHeader.Length) < FOE_HEADER_SIZE )
000010  8820              LDRH     r0,[r4,#0]
000012  2806              CMP      r0,#6
000014  d202              BCS      |L3.28|
;;;113        {
;;;114            return MBXERR_SIZETOOSHORT;
000016  2006              MOVS     r0,#6
                  |L3.24|
;;;115        }
;;;116    
;;;117        switch ( SWAPWORD(pFoeInd->FoeHeader.OpCode) )
;;;118        {
;;;119        case ECAT_FOE_OPCODE_RRQ:
;;;120            /* file read is requested */
;;;121            if ( u16FileAccessState == FOE_READY )
;;;122            {
;;;123                UINT32 u32Password = SWAPDWORD((((UINT32)pFoeInd->FoeHeader.Cmd.Password[FOE_COMMAND_LOWWORD]) | ((UINT32)pFoeInd->FoeHeader.Cmd.Password[FOE_COMMAND_HIGHWORD]) << 16));
;;;124                /* last FoE sequence was finished, call application function */
;;;125                nextState = FOE_Read((UINT16 MBXMEM *)pFoeInd->Data, dataSize, (UINT16*)pFoeInd->Data, u32Password);
;;;126    
;;;127                /* u32LastFileOffset contains the offset of the file which is sent now */
;;;128                u32LastFileOffset = 0;
;;;129    
;;;130                if (nextState <= FOE_MAXDATA)
;;;131                {
;;;132                    /* the first data packet shall be sent */
;;;133                    u32PacketNo    = 1;
;;;134                    /* u32FileOffset contains the offset of the file which shall be sent when the next FoE ACK is received */
;;;135                    u32FileOffset = nextState;
;;;136                }
;;;137                else if (nextState <= FOE_MAXBUSY)
;;;138                {
;;;139                    u32PacketNo    = 0;
;;;140                    u32FileOffset = 0;
;;;141                    u16FileAccessState = FOE_WAIT_FOR_ACK;
;;;142                }
;;;143            }
;;;144            break;
;;;145    
;;;146        case ECAT_FOE_OPCODE_WRQ:
;;;147            /* file write is requested */
;;;148            if ( u16FileAccessState == FOE_READY )
;;;149            {
;;;150                UINT32 u32Password = SWAPDWORD((((UINT32)pFoeInd->FoeHeader.Cmd.Password[FOE_COMMAND_LOWWORD]) | ((UINT32)pFoeInd->FoeHeader.Cmd.Password[FOE_COMMAND_HIGHWORD]) << 16));
;;;151                /* last FoE sequence was finished, call application function */
;;;152                nextState = FOE_Write((UINT16 MBXMEM *)pFoeInd->Data, dataSize, u32Password);
;;;153                if ( nextState == 0 )
;;;154                {
;;;155                    /* checking was successful, sent a FoE Ack service */
;;;156                    nextState = FOE_ACK;
;;;157                }
;;;158                /* initialize the packet number */
;;;159                u32PacketNo    = 0;
;;;160            }
;;;161            break;
;;;162    
;;;163        case ECAT_FOE_OPCODE_DATA:
;;;164            /* file data is received */
;;;165            if ( u16FileAccessState == FOE_WAIT_FOR_DATA
;;;166              || u16FileAccessState == FOE_WAIT_FOR_LAST_DATA )
;;;167            {
;;;168                UINT32 u32CmdPacketNo = SWAPDWORD((((UINT32)pFoeInd->FoeHeader.Cmd.PacketNo[FOE_COMMAND_LOWWORD]) | ((UINT32)pFoeInd->FoeHeader.Cmd.PacketNo[FOE_COMMAND_HIGHWORD]) << 16));
;;;169    
;;;170    /*ET9300 Project Handler :(#if BIG_ENDIAN_16BIT) lines 170 to 172 deleted*/
;;;171                /* we are waiting for file data, service is correct */
;;;172                if ( u32CmdPacketNo == u32PacketNo )
;;;173                {
;;;174                    /* the packet number is correct, call application function to store the file data */
;;;175                    nextState = FOE_Data((UINT16 MBXMEM *)pFoeInd->Data, dataSize);
;;;176                    if ( nextState == 0 )
;;;177                    {
;;;178                        /* checking was successful, sent a FoE Ack service */
;;;179                        nextState = FOE_ACK;
;;;180                    }
;;;181                }
;;;182                else
;;;183                {
;;;184                    nextState = ECAT_FOE_ERRCODE_PACKENO;
;;;185                }
;;;186            }
;;;187            break;
;;;188    
;;;189        case ECAT_FOE_OPCODE_ACK:
;;;190            /* acknowledge is received, next file part can be sent */
;;;191            if ( u16FileAccessState == FOE_WAIT_FOR_ACK )
;;;192            {
;;;193                /* we are waiting for an acknowledge, service is correct, call the application function
;;;194                   to get the next part of the file */
;;;195                nextState = FOE_Ack( u32FileOffset, (UINT16 MBXMEM *)pFoeInd->Data );
;;;196                /* u32LastFileOffset contains the offset of the file which is sent now */
;;;197                u32LastFileOffset = u32FileOffset;
;;;198    
;;;199                if (nextState <= FOE_MAXDATA) 
;;;200                {
;;;201                    /* u32FileOffset contains the offset of the file which shall be sent when the next FoE ACK is received */
;;;202                    u32FileOffset += nextState;
;;;203                    /* increment the packet number */
;;;204                    u32PacketNo++;
;;;205                }
;;;206            }
;;;207            else if ( u16FileAccessState == FOE_WAIT_FOR_LAST_ACK )
;;;208            {
;;;209                /* we were waiting for the last acknowledge, now the sequence is finished */
;;;210                nextState = FOE_FINISHED_NOACK;
;;;211            }
;;;212            break;
;;;213    
;;;214        case ECAT_FOE_OPCODE_ERR:
;;;215            /* a FoE Error service is received */
;;;216            if ( u16FileAccessState != FOE_READY )
;;;217            {
;;;218                UINT32 u32CmdErrorCode = SWAPDWORD((((UINT32)pFoeInd->FoeHeader.Cmd.ErrorCode[FOE_COMMAND_LOWWORD]) | ((UINT32)pFoeInd->FoeHeader.Cmd.ErrorCode[FOE_COMMAND_HIGHWORD]) << 16));
;;;219    
;;;220                /* a file transmission sequence is active, inform the application, that this sequence
;;;221                   was stopped */
;;;222                FOE_Error( u32CmdErrorCode );
;;;223    
;;;224                nextState = FOE_FINISHED;
;;;225            }
;;;226            break;
;;;227    
;;;228        case ECAT_FOE_OPCODE_BUSY:
;;;229            /* a FoE Busy service is received */
;;;230            if ( u16FileAccessState == FOE_WAIT_FOR_ACK
;;;231              || u16FileAccessState == FOE_WAIT_FOR_LAST_ACK )
;;;232            {
;;;233                /* we are waiting for an acknowledge, service is correct, call the application function
;;;234                   to resend the last part of the file */
;;;235                nextState = FOE_Busy( SWAPWORD(pFoeInd->FoeHeader.Cmd.Busy.Done), u32LastFileOffset, (UINT16 MBXMEM *)pFoeInd->Data );
;;;236            }
;;;237            break;
;;;238    
;;;239        }
;;;240    
;;;241        if ( nextState <= FOE_MAXDATA )
;;;242        {
;;;243            /* we send DATA and wait for ACK */
;;;244            UINT32 d = SWAPDWORD(u32PacketNo);
;;;245    
;;;246            /* store the OpCode in the mailbox buffer */
;;;247            pFoeInd->FoeHeader.OpCode           = SWAPWORD(ECAT_FOE_OPCODE_DATA);
;;;248            /* store the packet number in the mailbox buffer */
;;;249            pFoeInd->FoeHeader.Cmd.PacketNo[FOE_COMMAND_LOWWORD] = ((d & 0x0000FFFF));
;;;250            pFoeInd->FoeHeader.Cmd.PacketNo[FOE_COMMAND_HIGHWORD] = ((d & 0xFFFF0000) >> 16);
;;;251         
;;;252            /* store the size of the mailbox data in the mailbox buffer */
;;;253            pFoeInd->MbxHeader.Length           = FOE_HEADER_SIZE + nextState;
;;;254    
;;;255            if ( nextState == u16SendMbxSize - FOE_HEADER_SIZE - MBX_HEADER_SIZE )
;;;256            {
;;;257                /* packets still following, we wait for an ACK */
;;;258                u16FileAccessState = FOE_WAIT_FOR_ACK;
;;;259            }
;;;260            else
;;;261            {
;;;262                /* it was the last Packet, we wait for the last ACK */
;;;263                u16FileAccessState = FOE_WAIT_FOR_LAST_ACK;
;;;264            }
;;;265        }
;;;266        else if ( nextState <= FOE_MAXBUSY )
;;;267        {
;;;268            /* we are still storing the received file data (in flash for example) and
;;;269               send BUSY and wait for the DATA to be sent again */
;;;270            /* store the OpCode in the mailbox buffer */
;;;271            pFoeInd->FoeHeader.OpCode                   = SWAPWORD(ECAT_FOE_OPCODE_BUSY);
;;;272            /* store the information how much progress we made until we can receive file data again */
;;;273            pFoeInd->FoeHeader.Cmd.Busy.Done            = SWAPWORD(nextState-FOE_MAXBUSY_ZERO);
;;;274    
;;;275            pFoeInd->FoeHeader.Cmd.Busy.Entire          = 0;
;;;276            /* store the size of the mailbox data in the mailbox buffer */
;;;277    
;;;278            pFoeInd->MbxHeader.Length                   = FOE_HEADER_SIZE;
;;;279        }
;;;280        else if ( nextState == FOE_ACK || nextState == FOE_ACKFINISHED )
;;;281        {
;;;282            /* we send ACK and wait for DATA
;;;283                the next file data is expected with an incremented packet number, but
;;;284                we have to acknowledge the old packet first */
;;;285            UINT32 d = SWAPDWORD(u32PacketNo);
;;;286            u32PacketNo++;
;;;287            
;;;288            /* store the OpCode in the mailbox buffer */
;;;289            pFoeInd->FoeHeader.OpCode                   = SWAPWORD(ECAT_FOE_OPCODE_ACK);
;;;290            /* store the packet number in the mailbox buffer */
;;;291            pFoeInd->FoeHeader.Cmd.PacketNo[FOE_COMMAND_LOWWORD] = ((d & 0x0000FFFF));
;;;292            pFoeInd->FoeHeader.Cmd.PacketNo[FOE_COMMAND_HIGHWORD] = ((d & 0xFFFF0000) >> 16);
;;;293    
;;;294            /* store the size of the mailbox data in the mailbox buffer */
;;;295            pFoeInd->MbxHeader.Length                   = SIZEOF(TFOEHEADER);
;;;296    
;;;297            /* we wait for the next data part */
;;;298            if ( nextState == FOE_ACK )
;;;299            {
;;;300                /* we wait for the next data part */
;;;301                u16FileAccessState = FOE_WAIT_FOR_DATA;
;;;302            }
;;;303            else
;;;304            {
;;;305                /* the last data part was received */
;;;306                u16FileAccessState = FOE_READY;
;;;307            }
;;;308        }
;;;309        else if ( nextState < FOE_ERROR )
;;;310        {
;;;311            /* the file transmission sequence is finished, we have to send nothing */
;;;312            u16FileAccessState = FOE_READY;
;;;313            APPL_FreeMailboxBuffer(pFoeInd);
;;;314    /*ET9300 Project Handler :(#if MAILBOX_QUEUE #else) lines 317 to 320 deleted*/
;;;315            return 0;
;;;316        }
;;;317        else
;;;318        {
;;;319            UINT32 d = SWAPDWORD(nextState);
;;;320            UINT8 b = 0;
;;;321    
;;;322            /* store the OpCode in the mailbox buffer */
;;;323            pFoeInd->FoeHeader.OpCode                    = SWAPWORD(ECAT_FOE_OPCODE_ERR);
;;;324            /* store the ErrorCode in the mailbox buffer */
;;;325            pFoeInd->FoeHeader.Cmd.ErrorCode[FOE_COMMAND_LOWWORD] = ((d & 0x0000FFFF));
;;;326            pFoeInd->FoeHeader.Cmd.ErrorCode[FOE_COMMAND_HIGHWORD] = ((d & 0xFFFF0000) >> 16);
;;;327    
;;;328            /* store the size of the mailbox data in the mailbox buffer */
;;;329            pFoeInd->MbxHeader.Length                   = SIZEOF(TFOEHEADER);
;;;330    
;;;331            /* Error Text is returned in pFoeInd->Data */
;;;332            while (b < 32)
;;;333            {
;;;334                UINT16 data = ((UINT16 MBXMEM *) pFoeInd->Data)[(b >> 1)];
;;;335    
;;;336                if ((data & 0x00FF) == 0)
;;;337                {
;;;338                    break;
;;;339                }
;;;340                b++;
;;;341            
;;;342                if ((data & 0xFF00) == 0)
;;;343                {
;;;344                    break;
;;;345                }
;;;346                b++;
;;;347            }
;;;348            if ( b < 32 )
;;;349            {
;;;350                pFoeInd->MbxHeader.Length    += b+1;
;;;351            }
;;;352    
;;;353            /* the file transmission sequence is finished */
;;;354            u16FileAccessState = FOE_READY;
;;;355        }
;;;356    
;;;357        if ( bBootMode )
;;;358        {
;;;359            /* in BOOT mode the mailbox buffer is not sent via the mailbox functions
;;;360               because only FoE is allowed in BOOT mode, so we have to include the
;;;361                mailbox data link layer counter */
;;;362            pFoeInd->MbxHeader.Flags[MBX_OFFS_COUNTER] &= ~MBX_MASK_COUNTER;
;;;363            if ( (u8MbxReadCounter & 0x07) == 0 )
;;;364            {
;;;365                /* counter 0 is not allowed if mailbox data link layer is supported */
;;;366                u8MbxReadCounter = 1;
;;;367            }
;;;368            /* store the counter in the mailbox header */
;;;369            pFoeInd->MbxHeader.Flags[MBX_OFFS_COUNTER] |= u8MbxReadCounter << MBX_SHIFT_COUNTER;
;;;370            /* increment the counter for the next service */
;;;371              u8MbxReadCounter++;
;;;372            /* call the function to send the mailbox service directly,
;;;373               in BOOT mode we can be sure that the send mailbox is empty
;;;374               because no parallel services are allowed */
;;;375            MBX_CopyToSendMailbox((TMBX MBXMEM *) pFoeInd);
;;;376        }
;;;377        else
;;;378        {
;;;379            if ( MBX_MailboxSendReq((TMBX MBXMEM *) pFoeInd, FOE_SERVICE) != 0 )
;;;380            {
;;;381                /* if the mailbox service could not be sent (or stored), the response will be
;;;382                   stored in the variable pFoeSendStored and will be sent automatically
;;;383                    from the mailbox handler (FOE_ContinueInd) when the send mailbox will be read
;;;384                    the next time from the master */
;;;385                pFoeSendStored = (TMBX MBXMEM *) pFoeInd;
;;;386            }
;;;387        }
;;;388    
;;;389        return 0;
;;;390    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L3.28|
00001c  88e0              LDRH     r0,[r4,#6]            ;117
00001e  2807              CMP      r0,#7                 ;117
000020  d22e              BCS      |L3.128|
000022  e8dff000          TBB      [pc,r0]               ;117
000026  a604              DCB      0xa6,0x04
000028  2e446287          DCB      0x2e,0x44,0x62,0x87
00002c  9500              DCB      0x95,0x00
00002e  48a3              LDR      r0,|L3.700|
000030  8800              LDRH     r0,[r0,#0]            ;121  ; u16FileAccessState
000032  bb28              CBNZ     r0,|L3.128|
000034  8921              LDRH     r1,[r4,#8]            ;123
000036  8960              LDRH     r0,[r4,#0xa]          ;123
000038  ea414700          ORR      r7,r1,r0,LSL #16      ;123
00003c  463b              MOV      r3,r7                 ;125
00003e  f104020c          ADD      r2,r4,#0xc            ;125
000042  4631              MOV      r1,r6                 ;125
000044  4610              MOV      r0,r2                 ;125
000046  f7fffffe          BL       FOE_Read
00004a  4605              MOV      r5,r0                 ;125
00004c  2000              MOVS     r0,#0                 ;128
00004e  499c              LDR      r1,|L3.704|
000050  6008              STR      r0,[r1,#0]            ;128  ; u32LastFileOffset
000052  f6477095          MOV      r0,#0x7f95            ;130
000056  4285              CMP      r5,r0                 ;130
000058  dc05              BGT      |L3.102|
00005a  2001              MOVS     r0,#1                 ;133
00005c  4999              LDR      r1,|L3.708|
00005e  6008              STR      r0,[r1,#0]            ;133  ; u32PacketNo
000060  4899              LDR      r0,|L3.712|
000062  6005              STR      r5,[r0,#0]            ;135  ; u32FileOffset
000064  e00b              B        |L3.126|
                  |L3.102|
000066  f64770fa          MOV      r0,#0x7ffa            ;137
00006a  4285              CMP      r5,r0                 ;137
00006c  dc07              BGT      |L3.126|
00006e  2000              MOVS     r0,#0                 ;139
000070  4994              LDR      r1,|L3.708|
000072  6008              STR      r0,[r1,#0]            ;139  ; u32PacketNo
000074  4994              LDR      r1,|L3.712|
000076  6008              STR      r0,[r1,#0]            ;140  ; u32FileOffset
000078  2001              MOVS     r0,#1                 ;141
00007a  4990              LDR      r1,|L3.700|
00007c  8008              STRH     r0,[r1,#0]            ;141
                  |L3.126|
00007e  bf00              NOP                            ;143
                  |L3.128|
000080  e077              B        |L3.370|
000082  488e              LDR      r0,|L3.700|
000084  8800              LDRH     r0,[r0,#0]            ;148  ; u16FileAccessState
000086  b988              CBNZ     r0,|L3.172|
000088  8921              LDRH     r1,[r4,#8]            ;150
00008a  8960              LDRH     r0,[r4,#0xa]          ;150
00008c  ea414700          ORR      r7,r1,r0,LSL #16      ;150
000090  463a              MOV      r2,r7                 ;152
000092  4631              MOV      r1,r6                 ;152
000094  f104000c          ADD      r0,r4,#0xc            ;152
000098  f7fffffe          BL       FOE_Write
00009c  4605              MOV      r5,r0                 ;152
00009e  b90d              CBNZ     r5,|L3.164|
0000a0  f64775fd          MOV      r5,#0x7ffd            ;156
                  |L3.164|
0000a4  2000              MOVS     r0,#0                 ;159
0000a6  4987              LDR      r1,|L3.708|
0000a8  6008              STR      r0,[r1,#0]            ;159  ; u32PacketNo
0000aa  bf00              NOP                            ;160
                  |L3.172|
0000ac  e061              B        |L3.370|
0000ae  4883              LDR      r0,|L3.700|
0000b0  8800              LDRH     r0,[r0,#0]            ;165  ; u16FileAccessState
0000b2  2802              CMP      r0,#2                 ;165
0000b4  d003              BEQ      |L3.190|
0000b6  4881              LDR      r0,|L3.700|
0000b8  8800              LDRH     r0,[r0,#0]            ;166  ; u16FileAccessState
0000ba  2806              CMP      r0,#6                 ;166
0000bc  d114              BNE      |L3.232|
                  |L3.190|
0000be  8921              LDRH     r1,[r4,#8]            ;168
0000c0  8960              LDRH     r0,[r4,#0xa]          ;168
0000c2  ea414700          ORR      r7,r1,r0,LSL #16      ;168
0000c6  487f              LDR      r0,|L3.708|
0000c8  6800              LDR      r0,[r0,#0]            ;172  ; u32PacketNo
0000ca  4287              CMP      r7,r0                 ;172
0000cc  d109              BNE      |L3.226|
0000ce  4631              MOV      r1,r6                 ;175
0000d0  f104000c          ADD      r0,r4,#0xc            ;175
0000d4  f7fffffe          BL       FOE_Data
0000d8  4605              MOV      r5,r0                 ;175
0000da  b925              CBNZ     r5,|L3.230|
0000dc  f64775fd          MOV      r5,#0x7ffd            ;179
0000e0  e001              B        |L3.230|
                  |L3.226|
0000e2  f2480505          MOV      r5,#0x8005            ;184
                  |L3.230|
0000e6  bf00              NOP                            ;186
                  |L3.232|
0000e8  e043              B        |L3.370|
0000ea  4874              LDR      r0,|L3.700|
0000ec  8800              LDRH     r0,[r0,#0]            ;191  ; u16FileAccessState
0000ee  2801              CMP      r0,#1                 ;191
0000f0  d119              BNE      |L3.294|
0000f2  f104010c          ADD      r1,r4,#0xc            ;195
0000f6  4874              LDR      r0,|L3.712|
0000f8  6800              LDR      r0,[r0,#0]            ;195  ; u32FileOffset
0000fa  f7fffffe          BL       FOE_Ack
0000fe  4605              MOV      r5,r0                 ;195
000100  4871              LDR      r0,|L3.712|
000102  6800              LDR      r0,[r0,#0]            ;197  ; u32FileOffset
000104  496e              LDR      r1,|L3.704|
000106  6008              STR      r0,[r1,#0]            ;197  ; u32LastFileOffset
000108  f6477095          MOV      r0,#0x7f95            ;199
00010c  4285              CMP      r5,r0                 ;199
00010e  dc10              BGT      |L3.306|
000110  486d              LDR      r0,|L3.712|
000112  6800              LDR      r0,[r0,#0]            ;202  ; u32FileOffset
000114  4428              ADD      r0,r0,r5              ;202
000116  496c              LDR      r1,|L3.712|
000118  6008              STR      r0,[r1,#0]            ;202  ; u32FileOffset
00011a  486a              LDR      r0,|L3.708|
00011c  6800              LDR      r0,[r0,#0]            ;204  ; u32PacketNo
00011e  1c40              ADDS     r0,r0,#1              ;204
000120  4968              LDR      r1,|L3.708|
000122  6008              STR      r0,[r1,#0]            ;204  ; u32PacketNo
000124  e005              B        |L3.306|
                  |L3.294|
000126  4865              LDR      r0,|L3.700|
000128  8800              LDRH     r0,[r0,#0]            ;207  ; u16FileAccessState
00012a  2804              CMP      r0,#4                 ;207
00012c  d101              BNE      |L3.306|
00012e  f64775fe          MOV      r5,#0x7ffe            ;210
                  |L3.306|
000132  e01e              B        |L3.370|
000134  4861              LDR      r0,|L3.700|
000136  8800              LDRH     r0,[r0,#0]            ;216  ; u16FileAccessState
000138  b148              CBZ      r0,|L3.334|
00013a  8921              LDRH     r1,[r4,#8]            ;218
00013c  8960              LDRH     r0,[r4,#0xa]          ;218
00013e  ea414700          ORR      r7,r1,r0,LSL #16      ;218
000142  4638              MOV      r0,r7                 ;222
000144  f7fffffe          BL       FOE_Error
000148  f64775ff          MOV      r5,#0x7fff            ;224
00014c  bf00              NOP                            ;225
                  |L3.334|
00014e  e010              B        |L3.370|
000150  485a              LDR      r0,|L3.700|
000152  8800              LDRH     r0,[r0,#0]            ;230  ; u16FileAccessState
000154  2801              CMP      r0,#1                 ;230
000156  d003              BEQ      |L3.352|
000158  4858              LDR      r0,|L3.700|
00015a  8800              LDRH     r0,[r0,#0]            ;231  ; u16FileAccessState
00015c  2804              CMP      r0,#4                 ;231
00015e  d107              BNE      |L3.368|
                  |L3.352|
000160  8920              LDRH     r0,[r4,#8]            ;235
000162  f104020c          ADD      r2,r4,#0xc            ;235
000166  4956              LDR      r1,|L3.704|
000168  6809              LDR      r1,[r1,#0]            ;235  ; u32LastFileOffset
00016a  f7fffffe          BL       FOE_Busy
00016e  4605              MOV      r5,r0                 ;235
                  |L3.368|
000170  bf00              NOP                            ;237
                  |L3.370|
000172  bf00              NOP                            ;144
000174  f6477095          MOV      r0,#0x7f95            ;241
000178  4285              CMP      r5,r0                 ;241
00017a  dc15              BGT      |L3.424|
00017c  4951              LDR      r1,|L3.708|
00017e  6808              LDR      r0,[r1,#0]            ;244  ; u32PacketNo
000180  2103              MOVS     r1,#3                 ;247
000182  80e1              STRH     r1,[r4,#6]            ;247
000184  8120              STRH     r0,[r4,#8]            ;249
000186  0c02              LSRS     r2,r0,#16             ;250
000188  8162              STRH     r2,[r4,#0xa]          ;250
00018a  1da9              ADDS     r1,r5,#6              ;253
00018c  8021              STRH     r1,[r4,#0]            ;253
00018e  494f              LDR      r1,|L3.716|
000190  8809              LDRH     r1,[r1,#0]            ;255  ; u16SendMbxSize
000192  390c              SUBS     r1,r1,#0xc            ;255
000194  42a9              CMP      r1,r5                 ;255
000196  d103              BNE      |L3.416|
000198  2101              MOVS     r1,#1                 ;258
00019a  4a48              LDR      r2,|L3.700|
00019c  8011              STRH     r1,[r2,#0]            ;258
00019e  e002              B        |L3.422|
                  |L3.416|
0001a0  2104              MOVS     r1,#4                 ;263
0001a2  4a46              LDR      r2,|L3.700|
0001a4  8011              STRH     r1,[r2,#0]            ;263
                  |L3.422|
0001a6  e061              B        |L3.620|
                  |L3.424|
0001a8  f64770fa          MOV      r0,#0x7ffa            ;266
0001ac  4285              CMP      r5,r0                 ;266
0001ae  dc0a              BGT      |L3.454|
0001b0  2006              MOVS     r0,#6                 ;271
0001b2  80e0              STRH     r0,[r4,#6]            ;271
0001b4  f5a540fe          SUB      r0,r5,#0x7f00         ;273
0001b8  3896              SUBS     r0,r0,#0x96           ;273
0001ba  8120              STRH     r0,[r4,#8]            ;273
0001bc  2100              MOVS     r1,#0                 ;275
0001be  8161              STRH     r1,[r4,#0xa]          ;275
0001c0  2006              MOVS     r0,#6                 ;278
0001c2  8020              STRH     r0,[r4,#0]            ;278
0001c4  e052              B        |L3.620|
                  |L3.454|
0001c6  f64770fd          MOV      r0,#0x7ffd            ;280
0001ca  4285              CMP      r5,r0                 ;280
0001cc  d002              BEQ      |L3.468|
0001ce  1e40              SUBS     r0,r0,#1              ;280
0001d0  4285              CMP      r5,r0                 ;280
0001d2  d118              BNE      |L3.518|
                  |L3.468|
0001d4  493b              LDR      r1,|L3.708|
0001d6  6808              LDR      r0,[r1,#0]            ;285  ; u32PacketNo
0001d8  6809              LDR      r1,[r1,#0]            ;286  ; u32PacketNo
0001da  1c49              ADDS     r1,r1,#1              ;286
0001dc  4a39              LDR      r2,|L3.708|
0001de  6011              STR      r1,[r2,#0]            ;286  ; u32PacketNo
0001e0  2104              MOVS     r1,#4                 ;289
0001e2  80e1              STRH     r1,[r4,#6]            ;289
0001e4  8120              STRH     r0,[r4,#8]            ;291
0001e6  0c02              LSRS     r2,r0,#16             ;292
0001e8  8162              STRH     r2,[r4,#0xa]          ;292
0001ea  2106              MOVS     r1,#6                 ;295
0001ec  8021              STRH     r1,[r4,#0]            ;295
0001ee  f64771fd          MOV      r1,#0x7ffd            ;298
0001f2  428d              CMP      r5,r1                 ;298
0001f4  d103              BNE      |L3.510|
0001f6  2102              MOVS     r1,#2                 ;301
0001f8  4a30              LDR      r2,|L3.700|
0001fa  8011              STRH     r1,[r2,#0]            ;301
0001fc  e002              B        |L3.516|
                  |L3.510|
0001fe  2100              MOVS     r1,#0                 ;306
000200  4a2e              LDR      r2,|L3.700|
000202  8011              STRH     r1,[r2,#0]            ;306
                  |L3.516|
000204  e032              B        |L3.620|
                  |L3.518|
000206  f5b54f00          CMP      r5,#0x8000            ;309
00020a  da07              BGE      |L3.540|
00020c  2000              MOVS     r0,#0                 ;312
00020e  492b              LDR      r1,|L3.700|
000210  8008              STRH     r0,[r1,#0]            ;312
000212  4620              MOV      r0,r4                 ;313
000214  f7fffffe          BL       free
000218  2000              MOVS     r0,#0                 ;315
00021a  e6fd              B        |L3.24|
                  |L3.540|
00021c  4629              MOV      r1,r5                 ;319
00021e  2000              MOVS     r0,#0                 ;320
000220  2205              MOVS     r2,#5                 ;323
000222  80e2              STRH     r2,[r4,#6]            ;323
000224  8121              STRH     r1,[r4,#8]            ;325
000226  0c0b              LSRS     r3,r1,#16             ;326
000228  8163              STRH     r3,[r4,#0xa]          ;326
00022a  2206              MOVS     r2,#6                 ;329
00022c  8022              STRH     r2,[r4,#0]            ;329
00022e  e010              B        |L3.594|
                  |L3.560|
000230  1047              ASRS     r7,r0,#1              ;334
000232  f104030c          ADD      r3,r4,#0xc            ;334
000236  f8332017          LDRH     r2,[r3,r7,LSL #1]     ;334
00023a  b2d3              UXTB     r3,r2                 ;336
00023c  b903              CBNZ     r3,|L3.576|
00023e  e00a              B        |L3.598|
                  |L3.576|
000240  1c43              ADDS     r3,r0,#1              ;340
000242  b2d8              UXTB     r0,r3                 ;340
000244  f402437f          AND      r3,r2,#0xff00         ;342
000248  b903              CBNZ     r3,|L3.588|
00024a  e004              B        |L3.598|
                  |L3.588|
00024c  1c43              ADDS     r3,r0,#1              ;346
00024e  b2d8              UXTB     r0,r3                 ;346
000250  bf00              NOP                            ;347
                  |L3.594|
000252  2820              CMP      r0,#0x20              ;332
000254  dbec              BLT      |L3.560|
                  |L3.598|
000256  bf00              NOP                            ;338
000258  2820              CMP      r0,#0x20              ;348
00025a  da03              BGE      |L3.612|
00025c  8823              LDRH     r3,[r4,#0]            ;350
00025e  1c42              ADDS     r2,r0,#1              ;350
000260  441a              ADD      r2,r2,r3              ;350
000262  8022              STRH     r2,[r4,#0]            ;350
                  |L3.612|
000264  2200              MOVS     r2,#0                 ;354
000266  4b15              LDR      r3,|L3.700|
000268  801a              STRH     r2,[r3,#0]            ;354
00026a  bf00              NOP                            ;355
                  |L3.620|
00026c  4818              LDR      r0,|L3.720|
00026e  7800              LDRB     r0,[r0,#0]            ;357  ; bBootMode
000270  b1d0              CBZ      r0,|L3.680|
000272  88a0              LDRH     r0,[r4,#4]            ;362
000274  f4204070          BIC      r0,r0,#0xf000         ;362
000278  80a0              STRH     r0,[r4,#4]            ;362
00027a  4816              LDR      r0,|L3.724|
00027c  7800              LDRB     r0,[r0,#0]            ;363  ; u8MbxReadCounter
00027e  f0000007          AND      r0,r0,#7              ;363
000282  b910              CBNZ     r0,|L3.650|
000284  2001              MOVS     r0,#1                 ;366
000286  4913              LDR      r1,|L3.724|
000288  7008              STRB     r0,[r1,#0]            ;366
                  |L3.650|
00028a  88a0              LDRH     r0,[r4,#4]            ;369
00028c  4911              LDR      r1,|L3.724|
00028e  7809              LDRB     r1,[r1,#0]            ;369  ; u8MbxReadCounter
000290  ea403001          ORR      r0,r0,r1,LSL #12      ;369
000294  80a0              STRH     r0,[r4,#4]            ;369
000296  480f              LDR      r0,|L3.724|
000298  7800              LDRB     r0,[r0,#0]            ;371  ; u8MbxReadCounter
00029a  1c40              ADDS     r0,r0,#1              ;371
00029c  490d              LDR      r1,|L3.724|
00029e  7008              STRB     r0,[r1,#0]            ;371
0002a0  4620              MOV      r0,r4                 ;375
0002a2  f7fffffe          BL       MBX_CopyToSendMailbox
0002a6  e006              B        |L3.694|
                  |L3.680|
0002a8  2140              MOVS     r1,#0x40              ;379
0002aa  4620              MOV      r0,r4                 ;379
0002ac  f7fffffe          BL       MBX_MailboxSendReq
0002b0  b108              CBZ      r0,|L3.694|
0002b2  4809              LDR      r0,|L3.728|
0002b4  6004              STR      r4,[r0,#0]            ;385  ; pFoeSendStored
                  |L3.694|
0002b6  2000              MOVS     r0,#0                 ;389
0002b8  e6ae              B        |L3.24|
;;;391    
                          ENDP

0002ba  0000              DCW      0x0000
                  |L3.700|
                          DCD      u16FileAccessState
                  |L3.704|
                          DCD      u32LastFileOffset
                  |L3.708|
                          DCD      u32PacketNo
                  |L3.712|
                          DCD      u32FileOffset
                  |L3.716|
                          DCD      u16SendMbxSize
                  |L3.720|
                          DCD      bBootMode
                  |L3.724|
                          DCD      u8MbxReadCounter
                  |L3.728|
                          DCD      pFoeSendStored

                          AREA ||.data||, DATA, ALIGN=2

                  u32PacketNo
                          DCD      0x00000000
                  u32FileOffset
                          DCD      0x00000000
                  u32LastFileOffset
                          DCD      0x00000000
                  u16FileAccessState
00000c  00000000          DCB      0x00,0x00,0x00,0x00
                  pFoeSendStored
                          DCD      0x00000000
                  u16FoeMaxSendBlockSize
000014  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "etherCAT\\ecatfoe.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_ecatfoe_c_FOE_Init____REV16|
#line 388 "D:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_ecatfoe_c_FOE_Init____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_ecatfoe_c_FOE_Init____REVSH|
#line 402
|__asm___9_ecatfoe_c_FOE_Init____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_ecatfoe_c_FOE_Init____RRX|
#line 587
|__asm___9_ecatfoe_c_FOE_Init____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
