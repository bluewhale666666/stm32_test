; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\command.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\command.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\etherCAT -I.\Power -I.\CRC -IC:\Users\LENOVO\Desktop\slavecontroller\RTE -IC:\Users\LENOVO\Desktop\slavecontroller\RTE\Device\STM32F407ZETx -IC:\Users\LENOVO\Desktop\slavecontroller\RTE\Device\STM32F407ZETx\STCubeGenerated\Inc -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.16.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.16.0\Drivers\STM32F4xx_HAL_Driver\Inc -ISTCubeGenerated\Inc -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F407xx --omf_browse=.\objects\command.crf Power\Command.c]
                          THUMB

                          AREA ||i.Power_Command_Initilization||, CODE, READONLY, ALIGN=1

                  Power_Command_Initilization PROC
;;;78     
;;;79     void Power_Command_Initilization(void)
000000  4770              BX       lr
;;;80     {
;;;81     
;;;82     }
;;;83     
                          ENDP


                          AREA ||i.Power_Command_Main_Loop||, CODE, READONLY, ALIGN=2

                  Power_Command_Main_Loop PROC
;;;98     
;;;99     void Power_Command_Main_Loop(void)
000000  b570              PUSH     {r4-r6,lr}
;;;100    {
;;;101    	uint32_t nowTime;
;;;102    	uint32_t elapseTime;
;;;103    	HAL_StatusTypeDef TransmitResult;
;;;104    	
;;;105    	nowTime = HAL_GetTick();
000002  f7fffffe          BL       HAL_GetTick
000006  4606              MOV      r6,r0
;;;106    	elapseTime = nowTime - PeriodicTransmissionTime;
000008  480b              LDR      r0,|L2.56|
00000a  6800              LDR      r0,[r0,#0]  ; PeriodicTransmissionTime
00000c  1a35              SUBS     r5,r6,r0
;;;107    	if (elapseTime >= SM2SU_PERIODIC_TRANSMIT_IN_MS)
00000e  f5b57ffa          CMP      r5,#0x1f4
000012  d309              BCC      |L2.40|
;;;108    	{
;;;109    		TransmitResult = Power_Command_Transmit((uint8_t)SM2SU_REQ_CD_PERIODIC_TRANSMISSION);
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       Power_Command_Transmit
00001a  4604              MOV      r4,r0
;;;110    		if(TransmitResult == HAL_OK)
00001c  b954              CBNZ     r4,|L2.52|
;;;111    		{
;;;112    			PeriodicTransmissionTime = HAL_GetTick();
00001e  f7fffffe          BL       HAL_GetTick
000022  4905              LDR      r1,|L2.56|
000024  6008              STR      r0,[r1,#0]  ; PeriodicTransmissionTime
000026  e005              B        |L2.52|
                  |L2.40|
;;;113    		}
;;;114    	}
;;;115    	else if(elapseTime >= SM2SU_PERIODIC_TRANSMIT_TIMEOUT_IN_MS)
000028  f5b57f7a          CMP      r5,#0x3e8
00002c  d302              BCC      |L2.52|
;;;116    	{
;;;117    		PeriodicTransmissionTimeout = TRUE;
00002e  2001              MOVS     r0,#1
000030  4902              LDR      r1,|L2.60|
000032  7008              STRB     r0,[r1,#0]
                  |L2.52|
;;;118    	}
;;;119    	else
;;;120    	{
;;;121    		//no statement
;;;122    	}
;;;123    }
000034  bd70              POP      {r4-r6,pc}
;;;124    
                          ENDP

000036  0000              DCW      0x0000
                  |L2.56|
                          DCD      PeriodicTransmissionTime
                  |L2.60|
                          DCD      PeriodicTransmissionTimeout

                          AREA ||i.Power_Command_Transmit||, CODE, READONLY, ALIGN=2

                  Power_Command_Transmit PROC
;;;83     
;;;84     HAL_StatusTypeDef Power_Command_Transmit(uint8_t ReqCode)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;85     {
000004  4605              MOV      r5,r0
;;;86     	HAL_StatusTypeDef ans = HAL_ERROR;
000006  2601              MOVS     r6,#1
;;;87     	uint32_t i;
;;;88     	
;;;89     	for(i=0u; i<(uint32_t)SM2SU_REQ_MAX;i++){
000008  2400              MOVS     r4,#0
00000a  e020              B        |L3.78|
                  |L3.12|
;;;90     		if(ReqCode == strPwrCmdTxReqMap[i].SM2SU_REQ_CD){
00000c  eb040044          ADD      r0,r4,r4,LSL #1
000010  4912              LDR      r1,|L3.92|
000012  f8110020          LDRB     r0,[r1,r0,LSL #2]
000016  42a8              CMP      r0,r5
000018  d118              BNE      |L3.76|
;;;91     			strPwrCmdTxReqMap[i].pFunc(ReqCode,PowerCommandTxBuffer, &PwrCmdTxSize, strPwrCmdTxReqMap[i].InfoLength);
00001a  eb040044          ADD      r0,r4,r4,LSL #1
00001e  eb010080          ADD      r0,r1,r0,LSL #2
000022  8903              LDRH     r3,[r0,#8]
000024  eb040044          ADD      r0,r4,r4,LSL #1
000028  eb010080          ADD      r0,r1,r0,LSL #2
00002c  4a0c              LDR      r2,|L3.96|
00002e  490d              LDR      r1,|L3.100|
000030  6847              LDR      r7,[r0,#4]
000032  4628              MOV      r0,r5
000034  47b8              BLX      r7
;;;92     			ans = HAL_UART_Transmit(Uart_HandlePtr, PowerCommandTxBuffer, PwrCmdTxSize, (uint32_t)POWER_COMMAND_TRANSMIT_TIMEOUT_IN_MS);
000036  f44f73fa          MOV      r3,#0x1f4
00003a  4809              LDR      r0,|L3.96|
00003c  8802              LDRH     r2,[r0,#0]  ; PwrCmdTxSize
00003e  4909              LDR      r1,|L3.100|
000040  4809              LDR      r0,|L3.104|
000042  6800              LDR      r0,[r0,#0]  ; Uart_HandlePtr
000044  f7fffffe          BL       HAL_UART_Transmit
000048  4606              MOV      r6,r0
;;;93     			break;
00004a  e002              B        |L3.82|
                  |L3.76|
00004c  1c64              ADDS     r4,r4,#1              ;89
                  |L3.78|
00004e  2c06              CMP      r4,#6                 ;89
000050  d3dc              BCC      |L3.12|
                  |L3.82|
000052  bf00              NOP      
;;;94     		}
;;;95     	}
;;;96     	return(ans);
000054  4630              MOV      r0,r6
;;;97     }
000056  e8bd81f0          POP      {r4-r8,pc}
;;;98     
                          ENDP

00005a  0000              DCW      0x0000
                  |L3.92|
                          DCD      strPwrCmdTxReqMap
                  |L3.96|
                          DCD      PwrCmdTxSize
                  |L3.100|
                          DCD      PowerCommandTxBuffer
                  |L3.104|
                          DCD      Uart_HandlePtr

                          AREA ||i.SM2SU_Req_Call_Compulsory_Power_Off_Command||, CODE, READONLY, ALIGN=1

                  SM2SU_Req_Call_Compulsory_Power_Off_Command PROC
;;;261    
;;;262    static void SM2SU_Req_Call_Compulsory_Power_Off_Command(uint8_t ReqCd, uint8_t *pData, uint16_t *pSize, uint16_t InfoLength)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;263    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;264    	if(ReqCd != SM2SU_REQ_CD_COMPULSORY_POWER_OFF_COMMAND)
00000c  2c06              CMP      r4,#6
00000e  d003              BEQ      |L4.24|
;;;265    	{
;;;266    		*(pData) = NULL;
000010  2000              MOVS     r0,#0
000012  7028              STRB     r0,[r5,#0]
;;;267    		*(pSize) = 0u;
000014  8030              STRH     r0,[r6,#0]
000016  e005              B        |L4.36|
                  |L4.24|
;;;268    	}
;;;269    	else
;;;270    	{
;;;271    		//TODO
;;;272    		//INFO
;;;273    		//pData[POWER_COMMAND_HEADER_SIZE + POWER_COMMAND_CMD_SIZE + POWER_COMMAND_LENGTH_SIZE] = ;
;;;274    		//pData[POWER_COMMAND_HEADER_SIZE + POWER_COMMAND_CMD_SIZE + POWER_COMMAND_LENGTH_SIZE + 1u] = ;
;;;275    		
;;;276    		SM2SU_Req_Call_Encapsulation_Func(ReqCd, pData, pSize, InfoLength);
000018  463b              MOV      r3,r7
00001a  4632              MOV      r2,r6
00001c  4629              MOV      r1,r5
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       SM2SU_Req_Call_Encapsulation_Func
                  |L4.36|
;;;277    	}
;;;278    }
000024  e8bd81f0          POP      {r4-r8,pc}
                          ENDP


                          AREA ||i.SM2SU_Req_Call_Encapsulation_Func||, CODE, READONLY, ALIGN=1

                  SM2SU_Req_Call_Encapsulation_Func PROC
;;;124    
;;;125    static void SM2SU_Req_Call_Encapsulation_Func(uint8_t ReqCd, uint8_t *pData, uint16_t *pSize, uint16_t InfoLength)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;126    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
;;;127    		uint16_t crc16;
;;;128    	
;;;129    		*(pSize) = (POWER_COMMAND_HEADER_SIZE + POWER_COMMAND_END_SIZE + \
00000c  f105000c          ADD      r0,r5,#0xc
000010  8038              STRH     r0,[r7,#0]
;;;130    																	POWER_COMMAND_CMD_SIZE + POWER_COMMAND_LENGTH_SIZE + \
;;;131    																	InfoLength + POWER_COMMAND_CRC_SIZE);
;;;132    		//SOI
;;;133    		pData[0u] = 0xFFu;
000012  20ff              MOVS     r0,#0xff
000014  7020              STRB     r0,[r4,#0]
;;;134    		pData[1u] = 0xAAu;
000016  20aa              MOVS     r0,#0xaa
000018  7060              STRB     r0,[r4,#1]
;;;135    		pData[2u] = 0xAAu;
00001a  70a0              STRB     r0,[r4,#2]
;;;136    		pData[3u] = 0xFFu;
00001c  20ff              MOVS     r0,#0xff
00001e  70e0              STRB     r0,[r4,#3]
;;;137    		//CMD
;;;138    		pData[POWER_COMMAND_HEADER_SIZE] = ReqCd;
000020  7126              STRB     r6,[r4,#4]
;;;139    		//LENGTH
;;;140    		pData[POWER_COMMAND_HEADER_SIZE + POWER_COMMAND_CMD_SIZE] = InfoLength;
000022  7165              STRB     r5,[r4,#5]
;;;141    
;;;142    		//INFO
;;;143    		//updated in corresponding function
;;;144    	
;;;145    		//CCITT-CRC16
;;;146    		crc16 = CRC16_CCITT(pData, (POWER_COMMAND_HEADER_SIZE + \
000024  1da8              ADDS     r0,r5,#6
000026  b2c1              UXTB     r1,r0
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       CRC16_CCITT
00002e  4680              MOV      r8,r0
;;;147    																POWER_COMMAND_CMD_SIZE + POWER_COMMAND_LENGTH_SIZE + \
;;;148    																InfoLength));
;;;149    		pData[POWER_COMMAND_HEADER_SIZE + \
000030  1da8              ADDS     r0,r5,#6
000032  f8048000          STRB     r8,[r4,r0]
;;;150    					POWER_COMMAND_CMD_SIZE + POWER_COMMAND_LENGTH_SIZE + \
;;;151    					InfoLength] = (uint8_t)(crc16 & 0xff); 	
;;;152    		pData[POWER_COMMAND_HEADER_SIZE + \
000036  ea4f2118          LSR      r1,r8,#8
00003a  1de8              ADDS     r0,r5,#7
00003c  5421              STRB     r1,[r4,r0]
;;;153    					POWER_COMMAND_CMD_SIZE + POWER_COMMAND_LENGTH_SIZE + \
;;;154    					InfoLength + 1u] = (uint8_t)((crc16 >> 8)& 0xff);
;;;155    	
;;;156    		//EOI
;;;157    		pData[POWER_COMMAND_HEADER_SIZE + \
00003e  21ee              MOVS     r1,#0xee
000040  1c40              ADDS     r0,r0,#1
000042  5421              STRB     r1,[r4,r0]
;;;158    					POWER_COMMAND_CMD_SIZE + POWER_COMMAND_LENGTH_SIZE + \
;;;159    					InfoLength + POWER_COMMAND_CRC_SIZE] = 0xEEu;
;;;160    		pData[POWER_COMMAND_HEADER_SIZE + \
000044  2155              MOVS     r1,#0x55
000046  1c40              ADDS     r0,r0,#1
000048  5421              STRB     r1,[r4,r0]
;;;161    					POWER_COMMAND_CMD_SIZE + POWER_COMMAND_LENGTH_SIZE + \
;;;162    					InfoLength + POWER_COMMAND_CRC_SIZE + 1u] = 0x55u;
;;;163    		pData[POWER_COMMAND_HEADER_SIZE + \
00004a  1c40              ADDS     r0,r0,#1
00004c  5421              STRB     r1,[r4,r0]
;;;164    					POWER_COMMAND_CMD_SIZE + POWER_COMMAND_LENGTH_SIZE + \
;;;165    					InfoLength + POWER_COMMAND_CRC_SIZE + 2u] = 0x55u;
;;;166    		pData[POWER_COMMAND_HEADER_SIZE + \
00004e  21ee              MOVS     r1,#0xee
000050  1c40              ADDS     r0,r0,#1
000052  5421              STRB     r1,[r4,r0]
;;;167    					POWER_COMMAND_CMD_SIZE + POWER_COMMAND_LENGTH_SIZE + \
;;;168    					InfoLength + POWER_COMMAND_CRC_SIZE + 3u] = 0xEEu;
;;;169    }
000054  e8bd81f0          POP      {r4-r8,pc}
;;;170    
                          ENDP


                          AREA ||i.SM2SU_Req_Call_Periodic_Transmission||, CODE, READONLY, ALIGN=1

                  SM2SU_Req_Call_Periodic_Transmission PROC
;;;171    
;;;172    static void SM2SU_Req_Call_Periodic_Transmission(uint8_t ReqCd, uint8_t *pData, uint16_t *pSize, uint16_t InfoLength)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;173    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;174    	if(ReqCd != SM2SU_REQ_CD_PERIODIC_TRANSMISSION)
00000c  2c01              CMP      r4,#1
00000e  d003              BEQ      |L6.24|
;;;175    	{
;;;176    		*(pData) = NULL;
000010  2000              MOVS     r0,#0
000012  7028              STRB     r0,[r5,#0]
;;;177    		*(pSize) = 0u;
000014  8030              STRH     r0,[r6,#0]
000016  e005              B        |L6.36|
                  |L6.24|
;;;178    	}
;;;179    	else
;;;180    	{
;;;181    		//TODO
;;;182    		//INFO
;;;183    		//pData[POWER_COMMAND_HEADER_SIZE + POWER_COMMAND_CMD_SIZE + POWER_COMMAND_LENGTH_SIZE] = ;
;;;184    		//pData[POWER_COMMAND_HEADER_SIZE + POWER_COMMAND_CMD_SIZE + POWER_COMMAND_LENGTH_SIZE + 1u] = ;
;;;185    		
;;;186    		SM2SU_Req_Call_Encapsulation_Func(ReqCd, pData, pSize, InfoLength);
000018  463b              MOV      r3,r7
00001a  4632              MOV      r2,r6
00001c  4629              MOV      r1,r5
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       SM2SU_Req_Call_Encapsulation_Func
                  |L6.36|
;;;187    	}
;;;188    }
000024  e8bd81f0          POP      {r4-r8,pc}
;;;189    
                          ENDP


                          AREA ||i.SM2SU_Req_Call_Power_Off_Require||, CODE, READONLY, ALIGN=1

                  SM2SU_Req_Call_Power_Off_Require PROC
;;;207    
;;;208    static void SM2SU_Req_Call_Power_Off_Require(uint8_t ReqCd, uint8_t *pData, uint16_t *pSize, uint16_t InfoLength)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;209    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;210    	if(ReqCd != SM2SU_REQ_CD_POWER_OFF_REQUIRE)
00000c  2c03              CMP      r4,#3
00000e  d003              BEQ      |L7.24|
;;;211    	{
;;;212    		*(pData) = NULL;
000010  2000              MOVS     r0,#0
000012  7028              STRB     r0,[r5,#0]
;;;213    		*(pSize) = 0u;
000014  8030              STRH     r0,[r6,#0]
000016  e005              B        |L7.36|
                  |L7.24|
;;;214    	}
;;;215    	else
;;;216    	{
;;;217    		//TODO
;;;218    		//INFO
;;;219    		//pData[POWER_COMMAND_HEADER_SIZE + POWER_COMMAND_CMD_SIZE + POWER_COMMAND_LENGTH_SIZE] = ;
;;;220    		//pData[POWER_COMMAND_HEADER_SIZE + POWER_COMMAND_CMD_SIZE + POWER_COMMAND_LENGTH_SIZE + 1u] = ;
;;;221    		
;;;222    		SM2SU_Req_Call_Encapsulation_Func(ReqCd, pData, pSize, InfoLength);
000018  463b              MOV      r3,r7
00001a  4632              MOV      r2,r6
00001c  4629              MOV      r1,r5
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       SM2SU_Req_Call_Encapsulation_Func
                  |L7.36|
;;;223    	}
;;;224    }
000024  e8bd81f0          POP      {r4-r8,pc}
;;;225    
                          ENDP


                          AREA ||i.SM2SU_Req_Call_Reply_Control_Command||, CODE, READONLY, ALIGN=1

                  SM2SU_Req_Call_Reply_Control_Command PROC
;;;189    
;;;190    static void SM2SU_Req_Call_Reply_Control_Command(uint8_t ReqCd, uint8_t *pData, uint16_t *pSize, uint16_t InfoLength)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;191    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;192    	if(ReqCd != SM2SU_REQ_CD_REPLY_CONTROL_COMMAND)
00000c  2c02              CMP      r4,#2
00000e  d003              BEQ      |L8.24|
;;;193    	{
;;;194    		*(pData) = NULL;
000010  2000              MOVS     r0,#0
000012  7028              STRB     r0,[r5,#0]
;;;195    		*(pSize) = 0u;
000014  8030              STRH     r0,[r6,#0]
000016  e005              B        |L8.36|
                  |L8.24|
;;;196    	}
;;;197    	else
;;;198    	{
;;;199    		//TODO
;;;200    		//INFO
;;;201    		//pData[POWER_COMMAND_HEADER_SIZE + POWER_COMMAND_CMD_SIZE + POWER_COMMAND_LENGTH_SIZE] = ;
;;;202    		//pData[POWER_COMMAND_HEADER_SIZE + POWER_COMMAND_CMD_SIZE + POWER_COMMAND_LENGTH_SIZE + 1u] = ;
;;;203    		
;;;204    		SM2SU_Req_Call_Encapsulation_Func(ReqCd, pData, pSize, InfoLength);
000018  463b              MOV      r3,r7
00001a  4632              MOV      r2,r6
00001c  4629              MOV      r1,r5
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       SM2SU_Req_Call_Encapsulation_Func
                  |L8.36|
;;;205    	}
;;;206    }
000024  e8bd81f0          POP      {r4-r8,pc}
;;;207    
                          ENDP


                          AREA ||i.SM2SU_Req_Call_Reply_Power_Off_Command||, CODE, READONLY, ALIGN=1

                  SM2SU_Req_Call_Reply_Power_Off_Command PROC
;;;225    
;;;226    static void SM2SU_Req_Call_Reply_Power_Off_Command(uint8_t ReqCd, uint8_t *pData, uint16_t *pSize, uint16_t InfoLength)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;227    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;228    	if(ReqCd != SM2SU_REQ_CD_REPLY_POWER_OFF_COMMAND)
00000c  2c04              CMP      r4,#4
00000e  d003              BEQ      |L9.24|
;;;229    	{
;;;230    		*(pData) = NULL;
000010  2000              MOVS     r0,#0
000012  7028              STRB     r0,[r5,#0]
;;;231    		*(pSize) = 0u;
000014  8030              STRH     r0,[r6,#0]
000016  e005              B        |L9.36|
                  |L9.24|
;;;232    	}
;;;233    	else
;;;234    	{
;;;235    		//TODO
;;;236    		//INFO
;;;237    		//pData[POWER_COMMAND_HEADER_SIZE + POWER_COMMAND_CMD_SIZE + POWER_COMMAND_LENGTH_SIZE] = ;
;;;238    		//pData[POWER_COMMAND_HEADER_SIZE + POWER_COMMAND_CMD_SIZE + POWER_COMMAND_LENGTH_SIZE + 1u] = ;
;;;239    		
;;;240    		SM2SU_Req_Call_Encapsulation_Func(ReqCd, pData, pSize, InfoLength);
000018  463b              MOV      r3,r7
00001a  4632              MOV      r2,r6
00001c  4629              MOV      r1,r5
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       SM2SU_Req_Call_Encapsulation_Func
                  |L9.36|
;;;241    	}
;;;242    }
000024  e8bd81f0          POP      {r4-r8,pc}
;;;243    
                          ENDP


                          AREA ||i.SM2SU_Req_Call_Reply_Reboot_Command||, CODE, READONLY, ALIGN=1

                  SM2SU_Req_Call_Reply_Reboot_Command PROC
;;;243    
;;;244    static void SM2SU_Req_Call_Reply_Reboot_Command(uint8_t ReqCd, uint8_t *pData, uint16_t *pSize, uint16_t InfoLength)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;245    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;246    	if(ReqCd != SM2SU_REQ_CD_REPLY_REBOOT_COMMAND)
00000c  2c05              CMP      r4,#5
00000e  d003              BEQ      |L10.24|
;;;247    	{
;;;248    		*(pData) = NULL;
000010  2000              MOVS     r0,#0
000012  7028              STRB     r0,[r5,#0]
;;;249    		*(pSize) = 0u;
000014  8030              STRH     r0,[r6,#0]
000016  e005              B        |L10.36|
                  |L10.24|
;;;250    	}
;;;251    	else
;;;252    	{
;;;253    		//TODO
;;;254    		//INFO
;;;255    		//pData[POWER_COMMAND_HEADER_SIZE + POWER_COMMAND_CMD_SIZE + POWER_COMMAND_LENGTH_SIZE] = ;
;;;256    		//pData[POWER_COMMAND_HEADER_SIZE + POWER_COMMAND_CMD_SIZE + POWER_COMMAND_LENGTH_SIZE + 1u] = ;
;;;257    		
;;;258    		SM2SU_Req_Call_Encapsulation_Func(ReqCd, pData, pSize, InfoLength);
000018  463b              MOV      r3,r7
00001a  4632              MOV      r2,r6
00001c  4629              MOV      r1,r5
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       SM2SU_Req_Call_Encapsulation_Func
                  |L10.36|
;;;259    	}
;;;260    }
000024  e8bd81f0          POP      {r4-r8,pc}
;;;261    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  PowerCommandRxBuffer
                          %        32
                  PowerCommandTxBuffer
                          %        32

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  strPwrCmdTxReqMap
000000  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      SM2SU_Req_Call_Periodic_Transmission
000008  0010              DCW      0x0010
00000a  0000              DCB      0x00,0x00
00000c  02000000          DCB      0x02,0x00,0x00,0x00
                          DCD      SM2SU_Req_Call_Reply_Control_Command
000014  0002              DCW      0x0002
000016  0000              DCB      0x00,0x00
000018  03000000          DCB      0x03,0x00,0x00,0x00
                          DCD      SM2SU_Req_Call_Power_Off_Require
000020  0001              DCW      0x0001
000022  0000              DCB      0x00,0x00
000024  04000000          DCB      0x04,0x00,0x00,0x00
                          DCD      SM2SU_Req_Call_Reply_Power_Off_Command
00002c  0001              DCW      0x0001
00002e  0000              DCB      0x00,0x00
000030  05000000          DCB      0x05,0x00,0x00,0x00
                          DCD      SM2SU_Req_Call_Reply_Reboot_Command
000038  0001              DCW      0x0001
00003a  0000              DCB      0x00,0x00
00003c  06000000          DCB      0x06,0x00,0x00,0x00
                          DCD      SM2SU_Req_Call_Compulsory_Power_Off_Command
000044  0001              DCW      0x0001
000046  0000              DCB      0x00,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  crc_table
000000  00001021          DCW      0x0000,0x1021
000004  20423063          DCW      0x2042,0x3063
000008  408450a5          DCW      0x4084,0x50a5
00000c  60c670e7          DCW      0x60c6,0x70e7
000010  81089129          DCW      0x8108,0x9129
000014  a14ab16b          DCW      0xa14a,0xb16b
000018  c18cd1ad          DCW      0xc18c,0xd1ad
00001c  e1cef1ef          DCW      0xe1ce,0xf1ef
000020  12310210          DCW      0x1231,0x0210
000024  32732252          DCW      0x3273,0x2252
000028  52b54294          DCW      0x52b5,0x4294
00002c  72f762d6          DCW      0x72f7,0x62d6
000030  93398318          DCW      0x9339,0x8318
000034  b37ba35a          DCW      0xb37b,0xa35a
000038  d3bdc39c          DCW      0xd3bd,0xc39c
00003c  f3ffe3de          DCW      0xf3ff,0xe3de
000040  24623443          DCW      0x2462,0x3443
000044  04201401          DCW      0x0420,0x1401
000048  64e674c7          DCW      0x64e6,0x74c7
00004c  44a45485          DCW      0x44a4,0x5485
000050  a56ab54b          DCW      0xa56a,0xb54b
000054  85289509          DCW      0x8528,0x9509
000058  e5eef5cf          DCW      0xe5ee,0xf5cf
00005c  c5acd58d          DCW      0xc5ac,0xd58d
000060  36532672          DCW      0x3653,0x2672
000064  16110630          DCW      0x1611,0x0630
000068  76d766f6          DCW      0x76d7,0x66f6
00006c  569546b4          DCW      0x5695,0x46b4
000070  b75ba77a          DCW      0xb75b,0xa77a
000074  97198738          DCW      0x9719,0x8738
000078  f7dfe7fe          DCW      0xf7df,0xe7fe
00007c  d79dc7bc          DCW      0xd79d,0xc7bc
000080  48c458e5          DCW      0x48c4,0x58e5
000084  688678a7          DCW      0x6886,0x78a7
000088  08401861          DCW      0x0840,0x1861
00008c  28023823          DCW      0x2802,0x3823
000090  c9ccd9ed          DCW      0xc9cc,0xd9ed
000094  e98ef9af          DCW      0xe98e,0xf9af
000098  89489969          DCW      0x8948,0x9969
00009c  a90ab92b          DCW      0xa90a,0xb92b
0000a0  5af54ad4          DCW      0x5af5,0x4ad4
0000a4  7ab76a96          DCW      0x7ab7,0x6a96
0000a8  1a710a50          DCW      0x1a71,0x0a50
0000ac  3a332a12          DCW      0x3a33,0x2a12
0000b0  dbfdcbdc          DCW      0xdbfd,0xcbdc
0000b4  fbbfeb9e          DCW      0xfbbf,0xeb9e
0000b8  9b798b58          DCW      0x9b79,0x8b58
0000bc  bb3bab1a          DCW      0xbb3b,0xab1a
0000c0  6ca67c87          DCW      0x6ca6,0x7c87
0000c4  4ce45cc5          DCW      0x4ce4,0x5cc5
0000c8  2c223c03          DCW      0x2c22,0x3c03
0000cc  0c601c41          DCW      0x0c60,0x1c41
0000d0  edaefd8f          DCW      0xedae,0xfd8f
0000d4  cdecddcd          DCW      0xcdec,0xddcd
0000d8  ad2abd0b          DCW      0xad2a,0xbd0b
0000dc  8d689d49          DCW      0x8d68,0x9d49
0000e0  7e976eb6          DCW      0x7e97,0x6eb6
0000e4  5ed54ef4          DCW      0x5ed5,0x4ef4
0000e8  3e132e32          DCW      0x3e13,0x2e32
0000ec  1e510e70          DCW      0x1e51,0x0e70
0000f0  ff9fefbe          DCW      0xff9f,0xefbe
0000f4  dfddcffc          DCW      0xdfdd,0xcffc
0000f8  bf1baf3a          DCW      0xbf1b,0xaf3a
0000fc  9f598f78          DCW      0x9f59,0x8f78
000100  918881a9          DCW      0x9188,0x81a9
000104  b1caa1eb          DCW      0xb1ca,0xa1eb
000108  d10cc12d          DCW      0xd10c,0xc12d
00010c  f14ee16f          DCW      0xf14e,0xe16f
000110  108000a1          DCW      0x1080,0x00a1
000114  30c220e3          DCW      0x30c2,0x20e3
000118  50044025          DCW      0x5004,0x4025
00011c  70466067          DCW      0x7046,0x6067
000120  83b99398          DCW      0x83b9,0x9398
000124  a3fbb3da          DCW      0xa3fb,0xb3da
000128  c33dd31c          DCW      0xc33d,0xd31c
00012c  e37ff35e          DCW      0xe37f,0xf35e
000130  02b11290          DCW      0x02b1,0x1290
000134  22f332d2          DCW      0x22f3,0x32d2
000138  42355214          DCW      0x4235,0x5214
00013c  62777256          DCW      0x6277,0x7256
000140  b5eaa5cb          DCW      0xb5ea,0xa5cb
000144  95a88589          DCW      0x95a8,0x8589
000148  f56ee54f          DCW      0xf56e,0xe54f
00014c  d52cc50d          DCW      0xd52c,0xc50d
000150  34e224c3          DCW      0x34e2,0x24c3
000154  14a00481          DCW      0x14a0,0x0481
000158  74666447          DCW      0x7466,0x6447
00015c  54244405          DCW      0x5424,0x4405
000160  a7dbb7fa          DCW      0xa7db,0xb7fa
000164  879997b8          DCW      0x8799,0x97b8
000168  e75ff77e          DCW      0xe75f,0xf77e
00016c  c71dd73c          DCW      0xc71d,0xd73c
000170  26d336f2          DCW      0x26d3,0x36f2
000174  069116b0          DCW      0x0691,0x16b0
000178  66577676          DCW      0x6657,0x7676
00017c  46155634          DCW      0x4615,0x5634
000180  d94cc96d          DCW      0xd94c,0xc96d
000184  f90ee92f          DCW      0xf90e,0xe92f
000188  99c889e9          DCW      0x99c8,0x89e9
00018c  b98aa9ab          DCW      0xb98a,0xa9ab
000190  58444865          DCW      0x5844,0x4865
000194  78066827          DCW      0x7806,0x6827
000198  18c008e1          DCW      0x18c0,0x08e1
00019c  388228a3          DCW      0x3882,0x28a3
0001a0  cb7ddb5c          DCW      0xcb7d,0xdb5c
0001a4  eb3ffb1e          DCW      0xeb3f,0xfb1e
0001a8  8bf99bd8          DCW      0x8bf9,0x9bd8
0001ac  abbbbb9a          DCW      0xabbb,0xbb9a
0001b0  4a755a54          DCW      0x4a75,0x5a54
0001b4  6a377a16          DCW      0x6a37,0x7a16
0001b8  0af11ad0          DCW      0x0af1,0x1ad0
0001bc  2ab33a92          DCW      0x2ab3,0x3a92
0001c0  fd2eed0f          DCW      0xfd2e,0xed0f
0001c4  dd6ccd4d          DCW      0xdd6c,0xcd4d
0001c8  bdaaad8b          DCW      0xbdaa,0xad8b
0001cc  9de88dc9          DCW      0x9de8,0x8dc9
0001d0  7c266c07          DCW      0x7c26,0x6c07
0001d4  5c644c45          DCW      0x5c64,0x4c45
0001d8  3ca22c83          DCW      0x3ca2,0x2c83
0001dc  1ce00cc1          DCW      0x1ce0,0x0cc1
0001e0  ef1fff3e          DCW      0xef1f,0xff3e
0001e4  cf5ddf7c          DCW      0xcf5d,0xdf7c
0001e8  af9bbfba          DCW      0xaf9b,0xbfba
0001ec  8fd99ff8          DCW      0x8fd9,0x9ff8
0001f0  6e177e36          DCW      0x6e17,0x7e36
0001f4  4e555e74          DCW      0x4e55,0x5e74
0001f8  2e933eb2          DCW      0x2e93,0x3eb2
0001fc  0ed11ef0          DCW      0x0ed1,0x1ef0
                  Uart_HandlePtr
                          DCD      0x00000000
                  Udma_UartRx_HandlePtr
                          DCD      0x00000000
                  Udma_Uarttx_HandlePtr
                          DCD      0x00000000
                  PeriodicTransmissionTime
                          DCD      0x00000000
                  PeriodicTransmissionTimeout
000210  0000              DCB      0x00,0x00
                  PwrCmdTxSize
000212  0000              DCW      0x0000

;*** Start embedded assembler ***

#line 1 "Power\\Command.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_Command_c_ba064746____REV16|
#line 388 "D:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_Command_c_ba064746____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_Command_c_ba064746____REVSH|
#line 402
|__asm___9_Command_c_ba064746____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_Command_c_ba064746____RRX|
#line 587
|__asm___9_Command_c_ba064746____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
